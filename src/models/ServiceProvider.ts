/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 服务商实体，用于表示和管理系统中的服务提供方信息。
 * @export
 * @interface ServiceProvider
 */
export interface ServiceProvider {
    /**
     * 服务商的唯一标识符。
     * @type {number}
     * @memberof ServiceProvider
     */
    id?: number;
    /**
     * 服务商的业务代码，用于标识其所属业务领域。
     * @type {string}
     * @memberof ServiceProvider
     */
    bizCode?: string | null;
    /**
     * 服务商的名称。
     * @type {string}
     * @memberof ServiceProvider
     */
    name?: string | null;
    /**
     * 服务商的唯一代码，用于系统内部标识。
     * @type {string}
     * @memberof ServiceProvider
     */
    code?: string | null;
    /**
     * 服务商图标的URL或路径。
     * @type {string}
     * @memberof ServiceProvider
     */
    icon?: string | null;
    /**
     * 服务商的详细描述信息。
     * @type {string}
     * @memberof ServiceProvider
     */
    description?: string | null;
    /**
     * 用于分类或标记服务商的标签。
     * @type {string}
     * @memberof ServiceProvider
     */
    tags?: string | null;
    /**
     * 指示服务商是否在界面上显示。
     * @type {boolean}
     * @memberof ServiceProvider
     */
    show?: boolean;
    /**
     * 服务商在界面上的显示顺序。
     * @type {number}
     * @memberof ServiceProvider
     */
    showIndex?: number;
    /**
     * 服务商记录的创建日期，默认为当前时间。
     * @type {Date}
     * @memberof ServiceProvider
     */
    createDate?: Date;
    /**
     * 服务商记录的最后更新日期，默认为当前时间。
     * @type {Date}
     * @memberof ServiceProvider
     */
    lastUpdate?: Date;
}

/**
 * Check if a given object implements the ServiceProvider interface.
 */
export function instanceOfServiceProvider(value: object): value is ServiceProvider {
    return true;
}

export function ServiceProviderFromJSON(json: any): ServiceProvider {
    return ServiceProviderFromJSONTyped(json, false);
}

export function ServiceProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceProvider {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'bizCode': json['bizCode'] == null ? undefined : json['bizCode'],
        'name': json['name'] == null ? undefined : json['name'],
        'code': json['code'] == null ? undefined : json['code'],
        'icon': json['icon'] == null ? undefined : json['icon'],
        'description': json['description'] == null ? undefined : json['description'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'show': json['show'] == null ? undefined : json['show'],
        'showIndex': json['showIndex'] == null ? undefined : json['showIndex'],
        'createDate': json['createDate'] == null ? undefined : (new Date(json['createDate'])),
        'lastUpdate': json['lastUpdate'] == null ? undefined : (new Date(json['lastUpdate'])),
    };
}

export function ServiceProviderToJSON(json: any): ServiceProvider {
    return ServiceProviderToJSONTyped(json, false);
}

export function ServiceProviderToJSONTyped(value?: ServiceProvider | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'bizCode': value['bizCode'],
        'name': value['name'],
        'code': value['code'],
        'icon': value['icon'],
        'description': value['description'],
        'tags': value['tags'],
        'show': value['show'],
        'showIndex': value['showIndex'],
        'createDate': value['createDate'] == null ? undefined : ((value['createDate']).toISOString()),
        'lastUpdate': value['lastUpdate'] == null ? undefined : ((value['lastUpdate']).toISOString()),
    };
}

