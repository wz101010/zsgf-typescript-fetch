/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 公共配置存储实体，用于集中管理系统的配置项。
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * 配置项的唯一标识符。
     * @type {number}
     * @memberof Settings
     */
    id?: number;
    /**
     * 配置项所属的业务代码，用于分类管理。
     * @type {string}
     * @memberof Settings
     */
    bizCode?: string | null;
    /**
     * 配置项所属的业务标识，用于唯一标识业务。
     * @type {string}
     * @memberof Settings
     */
    bizIdentity?: string | null;
    /**
     * 配置项的提供者代码，用于标识配置来源。
     * @type {string}
     * @memberof Settings
     */
    providerCode?: string | null;
    /**
     * 配置项的分组代码，用于组织和管理相关配置。
     * @type {string}
     * @memberof Settings
     */
    groupCode?: string | null;
    /**
     * 配置项的唯一代码，用于标识具体的配置项。
     * @type {string}
     * @memberof Settings
     */
    code?: string | null;
    /**
     * 配置项的具体值，存储配置内容。
     * @type {string}
     * @memberof Settings
     */
    value?: string | null;
    /**
     * 用于分类或标记配置项的标签。
     * @type {string}
     * @memberof Settings
     */
    tags?: string | null;
    /**
     * 配置项的详细描述，说明其用途和作用。
     * @type {string}
     * @memberof Settings
     */
    description?: string | null;
    /**
     * 指示该配置项是否可供前端使用。
     * @type {boolean}
     * @memberof Settings
     */
    frontendUsable?: boolean;
    /**
     * 配置项的创建日期，默认为当前时间。
     * @type {Date}
     * @memberof Settings
     */
    createDate?: Date;
    /**
     * 配置项的最后更新日期，默认为当前时间。
     * @type {Date}
     * @memberof Settings
     */
    lastUpdate?: Date;
}

/**
 * Check if a given object implements the Settings interface.
 */
export function instanceOfSettings(value: object): value is Settings {
    return true;
}

export function SettingsFromJSON(json: any): Settings {
    return SettingsFromJSONTyped(json, false);
}

export function SettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Settings {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'bizCode': json['bizCode'] == null ? undefined : json['bizCode'],
        'bizIdentity': json['bizIdentity'] == null ? undefined : json['bizIdentity'],
        'providerCode': json['providerCode'] == null ? undefined : json['providerCode'],
        'groupCode': json['groupCode'] == null ? undefined : json['groupCode'],
        'code': json['code'] == null ? undefined : json['code'],
        'value': json['value'] == null ? undefined : json['value'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'description': json['description'] == null ? undefined : json['description'],
        'frontendUsable': json['frontendUsable'] == null ? undefined : json['frontendUsable'],
        'createDate': json['createDate'] == null ? undefined : (new Date(json['createDate'])),
        'lastUpdate': json['lastUpdate'] == null ? undefined : (new Date(json['lastUpdate'])),
    };
}

export function SettingsToJSON(json: any): Settings {
    return SettingsToJSONTyped(json, false);
}

export function SettingsToJSONTyped(value?: Settings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'bizCode': value['bizCode'],
        'bizIdentity': value['bizIdentity'],
        'providerCode': value['providerCode'],
        'groupCode': value['groupCode'],
        'code': value['code'],
        'value': value['value'],
        'tags': value['tags'],
        'description': value['description'],
        'frontendUsable': value['frontendUsable'],
        'createDate': value['createDate'] == null ? undefined : ((value['createDate']).toISOString()),
        'lastUpdate': value['lastUpdate'] == null ? undefined : ((value['lastUpdate']).toISOString()),
    };
}

