/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokenListResultApiResponse,
  AccessTokenPostRequest,
  AccessTokenPutRequest,
  BooleanApiResponse,
  TokenModelApiResponse,
} from '../models/index';
import {
    AccessTokenListResultApiResponseFromJSON,
    AccessTokenListResultApiResponseToJSON,
    AccessTokenPostRequestFromJSON,
    AccessTokenPostRequestToJSON,
    AccessTokenPutRequestFromJSON,
    AccessTokenPutRequestToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    TokenModelApiResponseFromJSON,
    TokenModelApiResponseToJSON,
} from '../models/index';

export interface AccessTokenDeleteRequest {
    id: number;
    appKey: string;
}

export interface AccessTokenPostOperationRequest {
    appKey: string;
    accessTokenPostRequest?: AccessTokenPostRequest;
}

export interface AccessTokenPutOperationRequest {
    id: number;
    appKey: string;
    accessTokenPutRequest?: AccessTokenPutRequest;
}

export interface AccessTokensRequest {
    appKey: string;
    userId?: number;
    skip?: number;
    take?: number;
}

/**
 * AccessTokenApi - interface
 * 
 * @export
 * @interface AccessTokenApiInterface
 */
export interface AccessTokenApiInterface {
    /**
     * 删除用户令牌
     * @summary 删除令牌
     * @param {number} id 
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenApiInterface
     */
    accessTokenDeleteRaw(requestParameters: AccessTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 删除用户令牌
     * 删除令牌
     */
    accessTokenDelete(requestParameters: AccessTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 创建新的用户令牌
     * @summary 创建令牌
     * @param {string} appKey 
     * @param {AccessTokenPostRequest} [accessTokenPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenApiInterface
     */
    accessTokenPostRaw(requestParameters: AccessTokenPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 创建新的用户令牌
     * 创建令牌
     */
    accessTokenPost(requestParameters: AccessTokenPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 更新现有的用户令牌
     * @summary 更新令牌
     * @param {number} id 
     * @param {string} appKey 
     * @param {AccessTokenPutRequest} [accessTokenPutRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenApiInterface
     */
    accessTokenPutRaw(requestParameters: AccessTokenPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 更新现有的用户令牌
     * 更新令牌
     */
    accessTokenPut(requestParameters: AccessTokenPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 获取用户令牌列表
     * @summary 令牌列表
     * @param {string} appKey 
     * @param {number} [userId] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenApiInterface
     */
    accessTokensRaw(requestParameters: AccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenListResultApiResponse>>;

    /**
     * 获取用户令牌列表
     * 令牌列表
     */
    accessTokens(requestParameters: AccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenListResultApiResponse>;

}

/**
 * 
 */
export class AccessTokenApi extends runtime.BaseAPI implements AccessTokenApiInterface {

    /**
     * 删除用户令牌
     * 删除令牌
     */
    async accessTokenDeleteRaw(requestParameters: AccessTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accessTokenDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling accessTokenDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AccessToken/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 删除用户令牌
     * 删除令牌
     */
    async accessTokenDelete(requestParameters: AccessTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.accessTokenDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的用户令牌
     * 创建令牌
     */
    async accessTokenPostRaw(requestParameters: AccessTokenPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling accessTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AccessToken/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccessTokenPostRequestToJSON(requestParameters['accessTokenPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的用户令牌
     * 创建令牌
     */
    async accessTokenPost(requestParameters: AccessTokenPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.accessTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新现有的用户令牌
     * 更新令牌
     */
    async accessTokenPutRaw(requestParameters: AccessTokenPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling accessTokenPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling accessTokenPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AccessToken/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccessTokenPutRequestToJSON(requestParameters['accessTokenPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 更新现有的用户令牌
     * 更新令牌
     */
    async accessTokenPut(requestParameters: AccessTokenPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.accessTokenPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取用户令牌列表
     * 令牌列表
     */
    async accessTokensRaw(requestParameters: AccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenListResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling accessTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AccessToken/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取用户令牌列表
     * 令牌列表
     */
    async accessTokens(requestParameters: AccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenListResultApiResponse> {
        const response = await this.accessTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
