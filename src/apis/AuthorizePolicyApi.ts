/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorizePolicy,
  AuthorizePolicyApiResponse,
  AuthorizePolicyListApiResponse,
  BooleanApiResponse,
  CreatePostResultApiResponse,
} from '../models/index';
import {
    AuthorizePolicyFromJSON,
    AuthorizePolicyToJSON,
    AuthorizePolicyApiResponseFromJSON,
    AuthorizePolicyApiResponseToJSON,
    AuthorizePolicyListApiResponseFromJSON,
    AuthorizePolicyListApiResponseToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    CreatePostResultApiResponseFromJSON,
    CreatePostResultApiResponseToJSON,
} from '../models/index';

export interface AuthorizePoliciesRequest {
    appKey: string;
    authType?: string;
    policyName?: string;
}

export interface AuthorizePolicyRequest {
    id: number;
    appKey: string;
}

export interface AuthorizePolicyDeleteRequest {
    id: number;
    appKey: string;
}

export interface AuthorizePolicyPostRequest {
    appKey: string;
    authorizePolicy?: AuthorizePolicy;
}

export interface AuthorizePolicyPutRequest {
    id: number;
    appKey: string;
    authorizePolicy?: AuthorizePolicy;
}

/**
 * AuthorizePolicyApi - interface
 * 
 * @export
 * @interface AuthorizePolicyApiInterface
 */
export interface AuthorizePolicyApiInterface {
    /**
     * 根据鉴权类型和策略名称获取鉴权策略列表
     * @summary 获取鉴权策略列表
     * @param {string} appKey 
     * @param {string} [authType] 鉴权类型（access_token、user、role）
     * @param {string} [policyName] 策略名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizePolicyApiInterface
     */
    authorizePoliciesRaw(requestParameters: AuthorizePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizePolicyListApiResponse>>;

    /**
     * 根据鉴权类型和策略名称获取鉴权策略列表
     * 获取鉴权策略列表
     */
    authorizePolicies(requestParameters: AuthorizePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizePolicyListApiResponse>;

    /**
     * 根据鉴权策略ID获取鉴权策略详情
     * @summary 获取鉴权策略详情
     * @param {number} id 鉴权策略ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizePolicyApiInterface
     */
    authorizePolicyRaw(requestParameters: AuthorizePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizePolicyApiResponse>>;

    /**
     * 根据鉴权策略ID获取鉴权策略详情
     * 获取鉴权策略详情
     */
    authorizePolicy(requestParameters: AuthorizePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizePolicyApiResponse>;

    /**
     * 根据鉴权策略ID删除鉴权策略
     * @summary 删除鉴权策略
     * @param {number} id 鉴权策略ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizePolicyApiInterface
     */
    authorizePolicyDeleteRaw(requestParameters: AuthorizePolicyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据鉴权策略ID删除鉴权策略
     * 删除鉴权策略
     */
    authorizePolicyDelete(requestParameters: AuthorizePolicyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的鉴权策略
     * @summary 添加鉴权策略
     * @param {string} appKey 
     * @param {AuthorizePolicy} [authorizePolicy] 鉴权策略对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizePolicyApiInterface
     */
    authorizePolicyPostRaw(requestParameters: AuthorizePolicyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePostResultApiResponse>>;

    /**
     * 添加新的鉴权策略
     * 添加鉴权策略
     */
    authorizePolicyPost(requestParameters: AuthorizePolicyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePostResultApiResponse>;

    /**
     * 根据鉴权策略ID更新鉴权策略
     * @summary 更新鉴权策略
     * @param {number} id 鉴权策略ID
     * @param {string} appKey 
     * @param {AuthorizePolicy} [authorizePolicy] 鉴权策略对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizePolicyApiInterface
     */
    authorizePolicyPutRaw(requestParameters: AuthorizePolicyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据鉴权策略ID更新鉴权策略
     * 更新鉴权策略
     */
    authorizePolicyPut(requestParameters: AuthorizePolicyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

}

/**
 * 
 */
export class AuthorizePolicyApi extends runtime.BaseAPI implements AuthorizePolicyApiInterface {

    /**
     * 根据鉴权类型和策略名称获取鉴权策略列表
     * 获取鉴权策略列表
     */
    async authorizePoliciesRaw(requestParameters: AuthorizePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizePolicyListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling authorizePolicies().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['authType'] != null) {
            queryParameters['authType'] = requestParameters['authType'];
        }

        if (requestParameters['policyName'] != null) {
            queryParameters['policyName'] = requestParameters['policyName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AuthorizePolicy/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizePolicyListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据鉴权类型和策略名称获取鉴权策略列表
     * 获取鉴权策略列表
     */
    async authorizePolicies(requestParameters: AuthorizePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizePolicyListApiResponse> {
        const response = await this.authorizePoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据鉴权策略ID获取鉴权策略详情
     * 获取鉴权策略详情
     */
    async authorizePolicyRaw(requestParameters: AuthorizePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizePolicyApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorizePolicy().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling authorizePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AuthorizePolicy/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizePolicyApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据鉴权策略ID获取鉴权策略详情
     * 获取鉴权策略详情
     */
    async authorizePolicy(requestParameters: AuthorizePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizePolicyApiResponse> {
        const response = await this.authorizePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据鉴权策略ID删除鉴权策略
     * 删除鉴权策略
     */
    async authorizePolicyDeleteRaw(requestParameters: AuthorizePolicyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorizePolicyDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling authorizePolicyDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AuthorizePolicy/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据鉴权策略ID删除鉴权策略
     * 删除鉴权策略
     */
    async authorizePolicyDelete(requestParameters: AuthorizePolicyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.authorizePolicyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的鉴权策略
     * 添加鉴权策略
     */
    async authorizePolicyPostRaw(requestParameters: AuthorizePolicyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling authorizePolicyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AuthorizePolicy/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizePolicyToJSON(requestParameters['authorizePolicy']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的鉴权策略
     * 添加鉴权策略
     */
    async authorizePolicyPost(requestParameters: AuthorizePolicyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePostResultApiResponse> {
        const response = await this.authorizePolicyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据鉴权策略ID更新鉴权策略
     * 更新鉴权策略
     */
    async authorizePolicyPutRaw(requestParameters: AuthorizePolicyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authorizePolicyPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling authorizePolicyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AuthorizePolicy/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizePolicyToJSON(requestParameters['authorizePolicy']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据鉴权策略ID更新鉴权策略
     * 更新鉴权策略
     */
    async authorizePolicyPut(requestParameters: AuthorizePolicyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.authorizePolicyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
