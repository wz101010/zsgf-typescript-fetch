/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  ExecuteFunctionRequest,
  Int64ApiResponse,
  ObjectApiResponse,
  ObjectListApiResponse,
  PostIndexRequest,
  StorageListResultApiResponse,
  StringApiResponse,
  StringListApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    ExecuteFunctionRequestFromJSON,
    ExecuteFunctionRequestToJSON,
    Int64ApiResponseFromJSON,
    Int64ApiResponseToJSON,
    ObjectApiResponseFromJSON,
    ObjectApiResponseToJSON,
    ObjectListApiResponseFromJSON,
    ObjectListApiResponseToJSON,
    PostIndexRequestFromJSON,
    PostIndexRequestToJSON,
    StorageListResultApiResponseFromJSON,
    StorageListResultApiResponseToJSON,
    StringApiResponseFromJSON,
    StringApiResponseToJSON,
    StringListApiResponseFromJSON,
    StringListApiResponseToJSON,
} from '../models/index';

export interface StorageAggregateRequest {
    table: string;
    appKey: string;
    pipeline?: string;
}

export interface StorageBatchUpdateRequest {
    table: string;
    filter: string;
    appKey: string;
    requestBody: Array<any>;
    replace?: boolean;
}

export interface StorageClearRequest {
    table: string;
    appKey: string;
    filter?: string;
}

export interface StorageDeleteRequest {
    table: string;
    id: string;
    appKey: string;
}

export interface StorageDeleteIndexRequest {
    table: string;
    appKey: string;
    indexName?: string;
}

export interface StorageDetailRequest {
    table: string;
    id: string;
    appKey: string;
    project?: string;
}

export interface StorageExecuteFunctionRequest {
    nonce: string;
    timestamp: number;
    signature: string;
    appKey: string;
    executeFunctionRequest?: ExecuteFunctionRequest;
}

export interface StorageExportRequest {
    table: string;
    appKey: string;
    filter?: string;
    startTime?: Date;
    endTime?: Date;
}

export interface StorageImportRequest {
    table: string;
    appKey: string;
    file?: Blob;
}

export interface StorageIndexesRequest {
    table: string;
    appKey: string;
}

export interface StorageListRequest {
    table: string;
    appKey: string;
    filter?: string;
    project?: string;
    sort?: string;
    startTime?: Date;
    endTime?: Date;
    explain?: boolean;
    take?: number;
    skip?: number;
}

export interface StoragePostRequest {
    table: string;
    appKey: string;
    requestBody: Array<any>;
}

export interface StoragePostIndexRequest {
    table: string;
    appKey: string;
    postIndexRequest?: PostIndexRequest;
}

export interface StoragePutRequest {
    table: string;
    id: string;
    appKey: string;
    requestBody: Array<any>;
    replace?: boolean;
}

export interface StorageRemoveRequest {
    table: string;
    appKey: string;
}

export interface StorageStatsRequest {
    table: string;
    appKey: string;
}

export interface StorageTablesRequest {
    appKey: string;
}

/**
 * StorageApi - interface
 * 
 * @export
 * @interface StorageApiInterface
 */
export interface StorageApiInterface {
    /**
     * 根据聚合管道查询指定表中的数据
     * @summary 聚合查询
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {string} [pipeline] 构建聚合查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageAggregateRaw(requestParameters: StorageAggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectListApiResponse>>;

    /**
     * 根据聚合管道查询指定表中的数据
     * 聚合查询
     */
    storageAggregate(requestParameters: StorageAggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectListApiResponse>;

    /**
     * 批量更新指定表中符合条件的文档，可以动态指定查询条件和更新字段
     * @summary 批量更新指定条件的数据
     * @param {string} table 表名称
     * @param {string} filter 查询条件
     * @param {string} appKey 
     * @param {Array<any>} requestBody 更新的字段
     * @param {boolean} [replace] 是否为全量替换，默认为 false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageBatchUpdateRaw(requestParameters: StorageBatchUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 批量更新指定表中符合条件的文档，可以动态指定查询条件和更新字段
     * 批量更新指定条件的数据
     */
    storageBatchUpdate(requestParameters: StorageBatchUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据筛选条件清空指定表中的数据
     * @summary 清空表数据
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {string} [filter] 筛选条件，json格式
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageClearRaw(requestParameters: StorageClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>>;

    /**
     * 根据筛选条件清空指定表中的数据
     * 清空表数据
     */
    storageClear(requestParameters: StorageClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse>;

    /**
     * 删除指定表中指定ID的数据
     * @summary 删除数据
     * @param {string} table 表名称
     * @param {string} id 数据ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageDeleteRaw(requestParameters: StorageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 删除指定表中指定ID的数据
     * 删除数据
     */
    storageDelete(requestParameters: StorageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 删除指定表的指定索引
     * @summary 删除索引
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {string} [indexName] 索引名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageDeleteIndexRaw(requestParameters: StorageDeleteIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 删除指定表的指定索引
     * 删除索引
     */
    storageDeleteIndex(requestParameters: StorageDeleteIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 获取指定表中指定ID的数据详情
     * @summary 数据详情
     * @param {string} table 表名称
     * @param {string} id 数据ID
     * @param {string} appKey 
     * @param {string} [project] json格式
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageDetailRaw(requestParameters: StorageDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectApiResponse>>;

    /**
     * 获取指定表中指定ID的数据详情
     * 数据详情
     */
    storageDetail(requestParameters: StorageDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectApiResponse>;

    /**
     * 执行指定的函数
     * @summary 执行函数
     * @param {string} nonce 随机字符串
     * @param {number} timestamp 时间戳
     * @param {string} signature 签名
     * @param {string} appKey 
     * @param {ExecuteFunctionRequest} [executeFunctionRequest] 函数请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageExecuteFunctionRaw(requestParameters: StorageExecuteFunctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectApiResponse>>;

    /**
     * 执行指定的函数
     * 执行函数
     */
    storageExecuteFunction(requestParameters: StorageExecuteFunctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectApiResponse>;

    /**
     * 根据筛选条件导出指定表中的数据
     * @summary 导出数据
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {string} [filter] 筛选条件，json格式
     * @param {Date} [startTime] 开始时间
     * @param {Date} [endTime] 结束时间
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageExportRaw(requestParameters: StorageExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * 根据筛选条件导出指定表中的数据
     * 导出数据
     */
    storageExport(requestParameters: StorageExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 从文件导入数据到指定表中
     * @summary 导入数据
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {Blob} [file] 导入的文件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageImportRaw(requestParameters: StorageImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 从文件导入数据到指定表中
     * 导入数据
     */
    storageImport(requestParameters: StorageImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 获取指定表的索引列表
     * @summary 获取索引
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageIndexesRaw(requestParameters: StorageIndexesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectListApiResponse>>;

    /**
     * 获取指定表的索引列表
     * 获取索引
     */
    storageIndexes(requestParameters: StorageIndexesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectListApiResponse>;

    /**
     * 根据条件查询指定表中的数据
     * @summary 查询数据
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {string} [filter] 过滤，json格式
     * @param {string} [project] 字段映射，json格式
     * @param {string} [sort] 排序，json格式
     * @param {Date} [startTime] 开始时间
     * @param {Date} [endTime] 结束时间
     * @param {boolean} [explain] 查看执行计划
     * @param {number} [take] 默认为10
     * @param {number} [skip] 默认为0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageListRaw(requestParameters: StorageListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageListResultApiResponse>>;

    /**
     * 根据条件查询指定表中的数据
     * 查询数据
     */
    storageList(requestParameters: StorageListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageListResultApiResponse>;

    /**
     * 向指定表中添加数据，可以是单个json对象或json数组
     * @summary 添加数据
     * @param {string} table 表名称（小写字母加数字,1-50位）
     * @param {string} appKey 
     * @param {Array<any>} requestBody json对象 / json数组
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storagePostRaw(requestParameters: StoragePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 向指定表中添加数据，可以是单个json对象或json数组
     * 添加数据
     */
    storagePost(requestParameters: StoragePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 为指定表添加索引
     * @summary 添加索引
     * @param {string} table 表名称（小写字母加数字,1-50位）
     * @param {string} appKey 
     * @param {PostIndexRequest} [postIndexRequest] json对象 / json数组
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storagePostIndexRaw(requestParameters: StoragePostIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 为指定表添加索引
     * 添加索引
     */
    storagePostIndex(requestParameters: StoragePostIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 更新指定表中指定ID的数据，可以选择全量更新或部分更新
     * @summary 更新数据
     * @param {string} table 表名称
     * @param {string} id 数据ID
     * @param {string} appKey 
     * @param {Array<any>} requestBody json格式
     * @param {boolean} [replace] 是否为全量更新，默认为false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storagePutRaw(requestParameters: StoragePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 更新指定表中指定ID的数据，可以选择全量更新或部分更新
     * 更新数据
     */
    storagePut(requestParameters: StoragePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 删除指定表
     * @summary 删除表
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageRemoveRaw(requestParameters: StorageRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 删除指定表
     * 删除表
     */
    storageRemove(requestParameters: StorageRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 获取指定表的数据统计信息
     * @summary 数据表统计
     * @param {string} table 表名称
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageStatsRaw(requestParameters: StorageStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectApiResponse>>;

    /**
     * 获取指定表的数据统计信息
     * 数据表统计
     */
    storageStats(requestParameters: StorageStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectApiResponse>;

    /**
     * 获取当前应用的所有数据表名称
     * @summary 获取数据表
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApiInterface
     */
    storageTablesRaw(requestParameters: StorageTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringListApiResponse>>;

    /**
     * 获取当前应用的所有数据表名称
     * 获取数据表
     */
    storageTables(requestParameters: StorageTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringListApiResponse>;

}

/**
 * 
 */
export class StorageApi extends runtime.BaseAPI implements StorageApiInterface {

    /**
     * 根据聚合管道查询指定表中的数据
     * 聚合查询
     */
    async storageAggregateRaw(requestParameters: StorageAggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectListApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageAggregate().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageAggregate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pipeline'] != null) {
            queryParameters['pipeline'] = requestParameters['pipeline'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Aggregate`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据聚合管道查询指定表中的数据
     * 聚合查询
     */
    async storageAggregate(requestParameters: StorageAggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectListApiResponse> {
        const response = await this.storageAggregateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 批量更新指定表中符合条件的文档，可以动态指定查询条件和更新字段
     * 批量更新指定条件的数据
     */
    async storageBatchUpdateRaw(requestParameters: StorageBatchUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageBatchUpdate().'
            );
        }

        if (requestParameters['filter'] == null) {
            throw new runtime.RequiredError(
                'filter',
                'Required parameter "filter" was null or undefined when calling storageBatchUpdate().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageBatchUpdate().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling storageBatchUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['replace'] != null) {
            queryParameters['replace'] = requestParameters['replace'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/batch-update`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 批量更新指定表中符合条件的文档，可以动态指定查询条件和更新字段
     * 批量更新指定条件的数据
     */
    async storageBatchUpdate(requestParameters: StorageBatchUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.storageBatchUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据筛选条件清空指定表中的数据
     * 清空表数据
     */
    async storageClearRaw(requestParameters: StorageClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageClear().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageClear().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Clear`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Int64ApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据筛选条件清空指定表中的数据
     * 清空表数据
     */
    async storageClear(requestParameters: StorageClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse> {
        const response = await this.storageClearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除指定表中指定ID的数据
     * 删除数据
     */
    async storageDeleteRaw(requestParameters: StorageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storageDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/{id}`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定表中指定ID的数据
     * 删除数据
     */
    async storageDelete(requestParameters: StorageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.storageDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除指定表的指定索引
     * 删除索引
     */
    async storageDeleteIndexRaw(requestParameters: StorageDeleteIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageDeleteIndex().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageDeleteIndex().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['indexName'] != null) {
            queryParameters['indexName'] = requestParameters['indexName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/indexes`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定表的指定索引
     * 删除索引
     */
    async storageDeleteIndex(requestParameters: StorageDeleteIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.storageDeleteIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定表中指定ID的数据详情
     * 数据详情
     */
    async storageDetailRaw(requestParameters: StorageDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageDetail().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storageDetail().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageDetail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/{id}`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定表中指定ID的数据详情
     * 数据详情
     */
    async storageDetail(requestParameters: StorageDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectApiResponse> {
        const response = await this.storageDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 执行指定的函数
     * 执行函数
     */
    async storageExecuteFunctionRaw(requestParameters: StorageExecuteFunctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectApiResponse>> {
        if (requestParameters['nonce'] == null) {
            throw new runtime.RequiredError(
                'nonce',
                'Required parameter "nonce" was null or undefined when calling storageExecuteFunction().'
            );
        }

        if (requestParameters['timestamp'] == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling storageExecuteFunction().'
            );
        }

        if (requestParameters['signature'] == null) {
            throw new runtime.RequiredError(
                'signature',
                'Required parameter "signature" was null or undefined when calling storageExecuteFunction().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageExecuteFunction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/ExecuteFunction`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: ExecuteFunctionRequestToJSON(requestParameters['executeFunctionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectApiResponseFromJSON(jsonValue));
    }

    /**
     * 执行指定的函数
     * 执行函数
     */
    async storageExecuteFunction(requestParameters: StorageExecuteFunctionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectApiResponse> {
        const response = await this.storageExecuteFunctionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据筛选条件导出指定表中的数据
     * 导出数据
     */
    async storageExportRaw(requestParameters: StorageExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageExport().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageExport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Export`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 根据筛选条件导出指定表中的数据
     * 导出数据
     */
    async storageExport(requestParameters: StorageExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.storageExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 从文件导入数据到指定表中
     * 导入数据
     */
    async storageImportRaw(requestParameters: StorageImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageImport().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Import`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 从文件导入数据到指定表中
     * 导入数据
     */
    async storageImport(requestParameters: StorageImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.storageImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定表的索引列表
     * 获取索引
     */
    async storageIndexesRaw(requestParameters: StorageIndexesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectListApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageIndexes().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageIndexes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Indexes`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectListApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定表的索引列表
     * 获取索引
     */
    async storageIndexes(requestParameters: StorageIndexesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectListApiResponse> {
        const response = await this.storageIndexesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据条件查询指定表中的数据
     * 查询数据
     */
    async storageListRaw(requestParameters: StorageListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageListResultApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageList().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['explain'] != null) {
            queryParameters['explain'] = requestParameters['explain'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据条件查询指定表中的数据
     * 查询数据
     */
    async storageList(requestParameters: StorageListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageListResultApiResponse> {
        const response = await this.storageListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向指定表中添加数据，可以是单个json对象或json数组
     * 添加数据
     */
    async storagePostRaw(requestParameters: StoragePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storagePost().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storagePost().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling storagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 向指定表中添加数据，可以是单个json对象或json数组
     * 添加数据
     */
    async storagePost(requestParameters: StoragePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.storagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 为指定表添加索引
     * 添加索引
     */
    async storagePostIndexRaw(requestParameters: StoragePostIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storagePostIndex().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storagePostIndex().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/indexes`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostIndexRequestToJSON(requestParameters['postIndexRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 为指定表添加索引
     * 添加索引
     */
    async storagePostIndex(requestParameters: StoragePostIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.storagePostIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新指定表中指定ID的数据，可以选择全量更新或部分更新
     * 更新数据
     */
    async storagePutRaw(requestParameters: StoragePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storagePut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storagePut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storagePut().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling storagePut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replace'] != null) {
            queryParameters['replace'] = requestParameters['replace'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/{id}`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 更新指定表中指定ID的数据，可以选择全量更新或部分更新
     * 更新数据
     */
    async storagePut(requestParameters: StoragePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.storagePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除指定表
     * 删除表
     */
    async storageRemoveRaw(requestParameters: StorageRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageRemove().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Remove`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定表
     * 删除表
     */
    async storageRemove(requestParameters: StorageRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.storageRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定表的数据统计信息
     * 数据表统计
     */
    async storageStatsRaw(requestParameters: StorageStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObjectApiResponse>> {
        if (requestParameters['table'] == null) {
            throw new runtime.RequiredError(
                'table',
                'Required parameter "table" was null or undefined when calling storageStats().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/{table}/Stats`.replace(`{${"table"}}`, encodeURIComponent(String(requestParameters['table']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定表的数据统计信息
     * 数据表统计
     */
    async storageStats(requestParameters: StorageStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObjectApiResponse> {
        const response = await this.storageStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取当前应用的所有数据表名称
     * 获取数据表
     */
    async storageTablesRaw(requestParameters: StorageTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling storageTables().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Storage/{appKey}/Tables`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringListApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取当前应用的所有数据表名称
     * 获取数据表
     */
    async storageTables(requestParameters: StorageTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringListApiResponse> {
        const response = await this.storageTablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
