/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  App,
  AppApiResponse,
  AppCheckVersionResultApiResponse,
  AppInfoResultApiResponse,
  AppListResultApiResponse,
  AppPostResultApiResponse,
  BooleanApiResponse,
  SetupCodeApiResponse,
} from '../models/index';
import {
    AppFromJSON,
    AppToJSON,
    AppApiResponseFromJSON,
    AppApiResponseToJSON,
    AppCheckVersionResultApiResponseFromJSON,
    AppCheckVersionResultApiResponseToJSON,
    AppInfoResultApiResponseFromJSON,
    AppInfoResultApiResponseToJSON,
    AppListResultApiResponseFromJSON,
    AppListResultApiResponseToJSON,
    AppPostResultApiResponseFromJSON,
    AppPostResultApiResponseToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    SetupCodeApiResponseFromJSON,
    SetupCodeApiResponseToJSON,
} from '../models/index';

export interface AppRequest {
    appKey: string;
}

export interface App2FARequest {
    appKey: string;
}

export interface App2FACheckRequest {
    appKey: string;
    code?: string;
}

export interface AppCheckVersionRequest {
    appKey: string;
    checkOnly?: boolean;
}

export interface AppDeleteRequest {
    appKey: string;
}

export interface AppInfoRequest {
    appKey: string;
    propCode?: string;
}

export interface AppPostRequest {
    app?: App;
}

export interface AppPutRequest {
    appKey: string;
    app?: App;
}

export interface AppTransferRequest {
    appKey: string;
    projectId?: number;
}

export interface AppsRequest {
    projectId?: number;
    skip?: number;
    take?: number;
}

/**
 * AppApi - interface
 * 
 * @export
 * @interface AppApiInterface
 */
export interface AppApiInterface {
    /**
     * 根据应用Key获取应用的详细信息。
     * @summary 应用详情
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appRaw(requestParameters: AppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppApiResponse>>;

    /**
     * 根据应用Key获取应用的详细信息。
     * 应用详情
     */
    app(requestParameters: AppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppApiResponse>;

    /**
     * 获取应用的双因素验证信息。
     * @summary 双因素验证 获取
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    app2FARaw(requestParameters: App2FARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupCodeApiResponse>>;

    /**
     * 获取应用的双因素验证信息。
     * 双因素验证 获取
     */
    app2FA(requestParameters: App2FARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupCodeApiResponse>;

    /**
     * 验证应用的双因素验证代码。
     * @summary 双因素验证 验证
     * @param {string} appKey 
     * @param {string} [code] 双因素验证代码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    app2FACheckRaw(requestParameters: App2FACheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 验证应用的双因素验证代码。
     * 双因素验证 验证
     */
    app2FACheck(requestParameters: App2FACheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 检查应用数据库的版本，如果有未应用的迁移且checkOnly为false，则应用这些迁移。
     * @summary 更新应用数据库
     * @param {string} appKey 
     * @param {boolean} [checkOnly] 是否仅检查版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appCheckVersionRaw(requestParameters: AppCheckVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppCheckVersionResultApiResponse>>;

    /**
     * 检查应用数据库的版本，如果有未应用的迁移且checkOnly为false，则应用这些迁移。
     * 更新应用数据库
     */
    appCheckVersion(requestParameters: AppCheckVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppCheckVersionResultApiResponse>;

    /**
     * 根据应用Key删除应用。
     * @summary 删除应用
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appDeleteRaw(requestParameters: AppDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据应用Key删除应用。
     * 删除应用
     */
    appDelete(requestParameters: AppDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据应用Key获取应用的详细信息和属性。
     * @summary 应用详情
     * @param {string} appKey 
     * @param {string} [propCode] 属性代码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appInfoRaw(requestParameters: AppInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppInfoResultApiResponse>>;

    /**
     * 根据应用Key获取应用的详细信息和属性。
     * 应用详情
     */
    appInfo(requestParameters: AppInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppInfoResultApiResponse>;

    /**
     * 创建一个新的应用。
     * @summary 创建应用
     * @param {App} [app] 应用对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appPostRaw(requestParameters: AppPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPostResultApiResponse>>;

    /**
     * 创建一个新的应用。
     * 创建应用
     */
    appPost(requestParameters: AppPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPostResultApiResponse>;

    /**
     * 根据应用Key更新应用信息。
     * @summary 更新应用
     * @param {string} appKey 
     * @param {App} [app] 应用对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appPutRaw(requestParameters: AppPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据应用Key更新应用信息。
     * 更新应用
     */
    appPut(requestParameters: AppPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 将应用转移到另一个项目。
     * @summary 转移应用
     * @param {string} appKey 
     * @param {number} [projectId] 目标项目ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appTransferRaw(requestParameters: AppTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppApiResponse>>;

    /**
     * 将应用转移到另一个项目。
     * 转移应用
     */
    appTransfer(requestParameters: AppTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppApiResponse>;

    /**
     * 根据项目ID获取应用列表，支持分页。
     * @summary 应用列表
     * @param {number} [projectId] 项目ID
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appsRaw(requestParameters: AppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppListResultApiResponse>>;

    /**
     * 根据项目ID获取应用列表，支持分页。
     * 应用列表
     */
    apps(requestParameters: AppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppListResultApiResponse>;

}

/**
 * 
 */
export class AppApi extends runtime.BaseAPI implements AppApiInterface {

    /**
     * 根据应用Key获取应用的详细信息。
     * 应用详情
     */
    async appRaw(requestParameters: AppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling app().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据应用Key获取应用的详细信息。
     * 应用详情
     */
    async app(requestParameters: AppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppApiResponse> {
        const response = await this.appRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取应用的双因素验证信息。
     * 双因素验证 获取
     */
    async app2FARaw(requestParameters: App2FARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupCodeApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling app2FA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}/2FA`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetupCodeApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取应用的双因素验证信息。
     * 双因素验证 获取
     */
    async app2FA(requestParameters: App2FARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupCodeApiResponse> {
        const response = await this.app2FARaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 验证应用的双因素验证代码。
     * 双因素验证 验证
     */
    async app2FACheckRaw(requestParameters: App2FACheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling app2FACheck().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}/2FACheck`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 验证应用的双因素验证代码。
     * 双因素验证 验证
     */
    async app2FACheck(requestParameters: App2FACheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.app2FACheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 检查应用数据库的版本，如果有未应用的迁移且checkOnly为false，则应用这些迁移。
     * 更新应用数据库
     */
    async appCheckVersionRaw(requestParameters: AppCheckVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppCheckVersionResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appCheckVersion().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['checkOnly'] != null) {
            queryParameters['checkOnly'] = requestParameters['checkOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}/CheckVersion`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppCheckVersionResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 检查应用数据库的版本，如果有未应用的迁移且checkOnly为false，则应用这些迁移。
     * 更新应用数据库
     */
    async appCheckVersion(requestParameters: AppCheckVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppCheckVersionResultApiResponse> {
        const response = await this.appCheckVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据应用Key删除应用。
     * 删除应用
     */
    async appDeleteRaw(requestParameters: AppDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据应用Key删除应用。
     * 删除应用
     */
    async appDelete(requestParameters: AppDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据应用Key获取应用的详细信息和属性。
     * 应用详情
     */
    async appInfoRaw(requestParameters: AppInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppInfoResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['propCode'] != null) {
            queryParameters['propCode'] = requestParameters['propCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}/Info`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppInfoResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据应用Key获取应用的详细信息和属性。
     * 应用详情
     */
    async appInfo(requestParameters: AppInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppInfoResultApiResponse> {
        const response = await this.appInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建一个新的应用。
     * 创建应用
     */
    async appPostRaw(requestParameters: AppPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppPostResultApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个新的应用。
     * 创建应用
     */
    async appPost(requestParameters: AppPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppPostResultApiResponse> {
        const response = await this.appPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据应用Key更新应用信息。
     * 更新应用
     */
    async appPutRaw(requestParameters: AppPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppToJSON(requestParameters['app']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据应用Key更新应用信息。
     * 更新应用
     */
    async appPut(requestParameters: AppPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将应用转移到另一个项目。
     * 转移应用
     */
    async appTransferRaw(requestParameters: AppTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appTransfer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App/{appKey}/Transfer`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppApiResponseFromJSON(jsonValue));
    }

    /**
     * 将应用转移到另一个项目。
     * 转移应用
     */
    async appTransfer(requestParameters: AppTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppApiResponse> {
        const response = await this.appTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据项目ID获取应用列表，支持分页。
     * 应用列表
     */
    async appsRaw(requestParameters: AppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppListResultApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/App`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据项目ID获取应用列表，支持分页。
     * 应用列表
     */
    async apps(requestParameters: AppsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppListResultApiResponse> {
        const response = await this.appsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
