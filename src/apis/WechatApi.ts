/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StringApiResponse,
  WechatJSConfigResultApiResponse,
} from '../models/index';
import {
    StringApiResponseFromJSON,
    StringApiResponseToJSON,
    WechatJSConfigResultApiResponseFromJSON,
    WechatJSConfigResultApiResponseToJSON,
} from '../models/index';

export interface WechatDecryptRequest {
    appKey: string;
    encryptedData?: string;
    iv?: string;
    sessionKey?: string;
}

export interface WechatGenerateSchemeRequest {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatJSCode2SessionRequest {
    appKey: string;
    jsCode?: string;
}

export interface WechatJSConfigRequest {
    appKey: string;
    url?: string;
}

export interface WechatMsgSecCheckRequest {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatSubscribeMSGRequest {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatSubscribeSendRequest {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatUrlLinkGenerateRequest {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatUserInfoRequest {
    appKey: string;
    openid?: string;
}

export interface WechatWXACodeGetRequest {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatWXACodeGetUnlimitedRequest {
    appKey: string;
    requestBody?: Array<any>;
}

/**
 * WechatApi - interface
 * 
 * @export
 * @interface WechatApiInterface
 */
export interface WechatApiInterface {
    /**
     * 解密小程序加密数据
     * @summary 小程序-解密数据
     * @param {string} appKey 
     * @param {string} [encryptedData] 加密的数据
     * @param {string} [iv] 加密算法的初始向量
     * @param {string} [sessionKey] 会话密钥
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatDecryptRaw(requestParameters: WechatDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 解密小程序加密数据
     * 小程序-解密数据
     */
    wechatDecrypt(requestParameters: WechatDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 生成小程序的scheme码
     * @summary 小程序-生成scheme码(该接口用于获取小程序 scheme 码，适用于短信、邮件、外部网页、微信内等拉起小程序的业务场景)
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatGenerateSchemeRaw(requestParameters: WechatGenerateSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 生成小程序的scheme码
     * 小程序-生成scheme码(该接口用于获取小程序 scheme 码，适用于短信、邮件、外部网页、微信内等拉起小程序的业务场景)
     */
    wechatGenerateScheme(requestParameters: WechatGenerateSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 校验小程序登录凭证
     * @summary 小程序-登录凭证校验
     * @param {string} appKey 
     * @param {string} [jsCode] 登录凭证，开发参考：https://dwz.cn/icNajFh7
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatJSCode2SessionRaw(requestParameters: WechatJSCode2SessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 校验小程序登录凭证
     * 小程序-登录凭证校验
     */
    wechatJSCode2Session(requestParameters: WechatJSCode2SessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 获取公众号H5的JS SDK配置
     * @summary 公众号H5-JS SDK Config
     * @param {string} appKey 
     * @param {string} [url] 当前网页的URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatJSConfigRaw(requestParameters: WechatJSConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WechatJSConfigResultApiResponse>>;

    /**
     * 获取公众号H5的JS SDK配置
     * 公众号H5-JS SDK Config
     */
    wechatJSConfig(requestParameters: WechatJSConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WechatJSConfigResultApiResponse>;

    /**
     * 检测消息内容是否含有违法违规信息
     * @summary 小程序-消息内容安全检测
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] 消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatMsgSecCheckRaw(requestParameters: WechatMsgSecCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * 检测消息内容是否含有违法违规信息
     * 小程序-消息内容安全检测
     */
    wechatMsgSecCheck(requestParameters: WechatMsgSecCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 发送公众号H5一次性订阅消息
     * @summary 公众号H5-发送一次性订阅消息
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] 订阅消息数据，开发参考：https://dwz.cn/IXptek5n
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatSubscribeMSGRaw(requestParameters: WechatSubscribeMSGRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 发送公众号H5一次性订阅消息
     * 公众号H5-发送一次性订阅消息
     */
    wechatSubscribeMSG(requestParameters: WechatSubscribeMSGRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 发送小程序订阅消息
     * @summary 小程序-发送订阅消息
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] 订阅消息数据，开发参考：https://dwz.cn/bohXaCnp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatSubscribeSendRaw(requestParameters: WechatSubscribeSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 发送小程序订阅消息
     * 小程序-发送订阅消息
     */
    wechatSubscribeSend(requestParameters: WechatSubscribeSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 生成小程序的网页跳转地址
     * @summary 小程序-生成网页跳转地址(获取小程序 URL Link，适用于短信、邮件、网页、微信内等拉起小程序的业务场景)
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] 跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatUrlLinkGenerateRaw(requestParameters: WechatUrlLinkGenerateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 生成小程序的网页跳转地址
     * 小程序-生成网页跳转地址(获取小程序 URL Link，适用于短信、邮件、网页、微信内等拉起小程序的业务场景)
     */
    wechatUrlLinkGenerate(requestParameters: WechatUrlLinkGenerateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 获取公众号H5用户的UnionID
     * @summary 公众号H5-获取用户UnionID
     * @param {string} appKey 
     * @param {string} [openid] 用户的OpenID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatUserInfoRaw(requestParameters: WechatUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 获取公众号H5用户的UnionID
     * 公众号H5-获取用户UnionID
     */
    wechatUserInfo(requestParameters: WechatUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 获取小程序码
     * @summary 小程序-获取小程序码
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatWXACodeGetRaw(requestParameters: WechatWXACodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * 获取小程序码
     * 小程序-获取小程序码
     */
    wechatWXACodeGet(requestParameters: WechatWXACodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 获取无限制的小程序码
     * @summary 小程序-获取小程序码(无限制)
     * @param {string} appKey 
     * @param {Array<any>} [requestBody] 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WechatApiInterface
     */
    wechatWXACodeGetUnlimitedRaw(requestParameters: WechatWXACodeGetUnlimitedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * 获取无限制的小程序码
     * 小程序-获取小程序码(无限制)
     */
    wechatWXACodeGetUnlimited(requestParameters: WechatWXACodeGetUnlimitedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

}

/**
 * 
 */
export class WechatApi extends runtime.BaseAPI implements WechatApiInterface {

    /**
     * 解密小程序加密数据
     * 小程序-解密数据
     */
    async wechatDecryptRaw(requestParameters: WechatDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatDecrypt().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['encryptedData'] != null) {
            queryParameters['encryptedData'] = requestParameters['encryptedData'];
        }

        if (requestParameters['iv'] != null) {
            queryParameters['iv'] = requestParameters['iv'];
        }

        if (requestParameters['sessionKey'] != null) {
            queryParameters['sessionKey'] = requestParameters['sessionKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/Decrypt`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 解密小程序加密数据
     * 小程序-解密数据
     */
    async wechatDecrypt(requestParameters: WechatDecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatDecryptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生成小程序的scheme码
     * 小程序-生成scheme码(该接口用于获取小程序 scheme 码，适用于短信、邮件、外部网页、微信内等拉起小程序的业务场景)
     */
    async wechatGenerateSchemeRaw(requestParameters: WechatGenerateSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatGenerateScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/GenerateScheme`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 生成小程序的scheme码
     * 小程序-生成scheme码(该接口用于获取小程序 scheme 码，适用于短信、邮件、外部网页、微信内等拉起小程序的业务场景)
     */
    async wechatGenerateScheme(requestParameters: WechatGenerateSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatGenerateSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 校验小程序登录凭证
     * 小程序-登录凭证校验
     */
    async wechatJSCode2SessionRaw(requestParameters: WechatJSCode2SessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatJSCode2Session().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['jsCode'] != null) {
            queryParameters['js_code'] = requestParameters['jsCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/JSCode2Session`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 校验小程序登录凭证
     * 小程序-登录凭证校验
     */
    async wechatJSCode2Session(requestParameters: WechatJSCode2SessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatJSCode2SessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取公众号H5的JS SDK配置
     * 公众号H5-JS SDK Config
     */
    async wechatJSConfigRaw(requestParameters: WechatJSConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WechatJSConfigResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatJSConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/JSConfig`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WechatJSConfigResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取公众号H5的JS SDK配置
     * 公众号H5-JS SDK Config
     */
    async wechatJSConfig(requestParameters: WechatJSConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WechatJSConfigResultApiResponse> {
        const response = await this.wechatJSConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 检测消息内容是否含有违法违规信息
     * 小程序-消息内容安全检测
     */
    async wechatMsgSecCheckRaw(requestParameters: WechatMsgSecCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatMsgSecCheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/MsgSecCheck`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 检测消息内容是否含有违法违规信息
     * 小程序-消息内容安全检测
     */
    async wechatMsgSecCheck(requestParameters: WechatMsgSecCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.wechatMsgSecCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 发送公众号H5一次性订阅消息
     * 公众号H5-发送一次性订阅消息
     */
    async wechatSubscribeMSGRaw(requestParameters: WechatSubscribeMSGRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatSubscribeMSG().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/SubscribeMSG`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 发送公众号H5一次性订阅消息
     * 公众号H5-发送一次性订阅消息
     */
    async wechatSubscribeMSG(requestParameters: WechatSubscribeMSGRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatSubscribeMSGRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 发送小程序订阅消息
     * 小程序-发送订阅消息
     */
    async wechatSubscribeSendRaw(requestParameters: WechatSubscribeSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatSubscribeSend().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/SubscribeSend`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 发送小程序订阅消息
     * 小程序-发送订阅消息
     */
    async wechatSubscribeSend(requestParameters: WechatSubscribeSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatSubscribeSendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生成小程序的网页跳转地址
     * 小程序-生成网页跳转地址(获取小程序 URL Link，适用于短信、邮件、网页、微信内等拉起小程序的业务场景)
     */
    async wechatUrlLinkGenerateRaw(requestParameters: WechatUrlLinkGenerateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatUrlLinkGenerate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/UrlLinkGenerate`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 生成小程序的网页跳转地址
     * 小程序-生成网页跳转地址(获取小程序 URL Link，适用于短信、邮件、网页、微信内等拉起小程序的业务场景)
     */
    async wechatUrlLinkGenerate(requestParameters: WechatUrlLinkGenerateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatUrlLinkGenerateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取公众号H5用户的UnionID
     * 公众号H5-获取用户UnionID
     */
    async wechatUserInfoRaw(requestParameters: WechatUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatUserInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['openid'] != null) {
            queryParameters['openid'] = requestParameters['openid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/UserInfo`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取公众号H5用户的UnionID
     * 公众号H5-获取用户UnionID
     */
    async wechatUserInfo(requestParameters: WechatUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.wechatUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取小程序码
     * 小程序-获取小程序码
     */
    async wechatWXACodeGetRaw(requestParameters: WechatWXACodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatWXACodeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/WXACodeGet`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 获取小程序码
     * 小程序-获取小程序码
     */
    async wechatWXACodeGet(requestParameters: WechatWXACodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.wechatWXACodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取无限制的小程序码
     * 小程序-获取小程序码(无限制)
     */
    async wechatWXACodeGetUnlimitedRaw(requestParameters: WechatWXACodeGetUnlimitedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling wechatWXACodeGetUnlimited().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Wechat/{appKey}/WXACodeGetUnlimited`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 获取无限制的小程序码
     * 小程序-获取小程序码(无限制)
     */
    async wechatWXACodeGetUnlimited(requestParameters: WechatWXACodeGetUnlimitedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.wechatWXACodeGetUnlimitedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
