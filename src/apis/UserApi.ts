/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppUserResetEmailRequest,
  AppUserResetPhoneRequest,
  AppUserResetPwdRequest,
  BooleanApiResponse,
  EmailSignInRequest,
  EmailSignUpRequest,
  FollowerPutModel,
  GeoLocationModel,
  GeoLocationModelApiResponse,
  GetUserProfileResultApiResponse,
  Int64ApiResponse,
  OAuthAccountBindRequest,
  OAuthAccountPutBindRequest,
  OAuthAccountSignInRequest,
  PhoneSignInRequest,
  PhoneSignUpRequest,
  QRCodePreSignInRequest,
  QRCodeScanRequest,
  QRCodeSignInRequest,
  QRCodeSignUpRequest,
  SendEmailCodeRequest,
  SendSMSCodeRequest,
  SetupCodeApiResponse,
  SignInRequest,
  SignUpRequest,
  TokenModelApiResponse,
  UnionIDSignInRequest,
  UnionIDSignUpRequest,
  UpdateProfileRequest,
  User,
  UserApiResponse,
  UserCommonInterestsResultApiResponse,
  UserFollowersResultApiResponse,
  UserFriendsNearByResultApiResponse,
  UserListResultApiResponse,
  UserLocationPostResultApiResponse,
  UserLocationsResultApiResponse,
  UserLoginsListApiResponse,
  UserMutualFollowersResultApiResponse,
  UserMutualFollowingsResultApiResponse,
  UserProfileResultApiResponse,
  UserQRCodeScanResultApiResponse,
} from '../models/index';
import {
    AppUserResetEmailRequestFromJSON,
    AppUserResetEmailRequestToJSON,
    AppUserResetPhoneRequestFromJSON,
    AppUserResetPhoneRequestToJSON,
    AppUserResetPwdRequestFromJSON,
    AppUserResetPwdRequestToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    EmailSignInRequestFromJSON,
    EmailSignInRequestToJSON,
    EmailSignUpRequestFromJSON,
    EmailSignUpRequestToJSON,
    FollowerPutModelFromJSON,
    FollowerPutModelToJSON,
    GeoLocationModelFromJSON,
    GeoLocationModelToJSON,
    GeoLocationModelApiResponseFromJSON,
    GeoLocationModelApiResponseToJSON,
    GetUserProfileResultApiResponseFromJSON,
    GetUserProfileResultApiResponseToJSON,
    Int64ApiResponseFromJSON,
    Int64ApiResponseToJSON,
    OAuthAccountBindRequestFromJSON,
    OAuthAccountBindRequestToJSON,
    OAuthAccountPutBindRequestFromJSON,
    OAuthAccountPutBindRequestToJSON,
    OAuthAccountSignInRequestFromJSON,
    OAuthAccountSignInRequestToJSON,
    PhoneSignInRequestFromJSON,
    PhoneSignInRequestToJSON,
    PhoneSignUpRequestFromJSON,
    PhoneSignUpRequestToJSON,
    QRCodePreSignInRequestFromJSON,
    QRCodePreSignInRequestToJSON,
    QRCodeScanRequestFromJSON,
    QRCodeScanRequestToJSON,
    QRCodeSignInRequestFromJSON,
    QRCodeSignInRequestToJSON,
    QRCodeSignUpRequestFromJSON,
    QRCodeSignUpRequestToJSON,
    SendEmailCodeRequestFromJSON,
    SendEmailCodeRequestToJSON,
    SendSMSCodeRequestFromJSON,
    SendSMSCodeRequestToJSON,
    SetupCodeApiResponseFromJSON,
    SetupCodeApiResponseToJSON,
    SignInRequestFromJSON,
    SignInRequestToJSON,
    SignUpRequestFromJSON,
    SignUpRequestToJSON,
    TokenModelApiResponseFromJSON,
    TokenModelApiResponseToJSON,
    UnionIDSignInRequestFromJSON,
    UnionIDSignInRequestToJSON,
    UnionIDSignUpRequestFromJSON,
    UnionIDSignUpRequestToJSON,
    UpdateProfileRequestFromJSON,
    UpdateProfileRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserApiResponseFromJSON,
    UserApiResponseToJSON,
    UserCommonInterestsResultApiResponseFromJSON,
    UserCommonInterestsResultApiResponseToJSON,
    UserFollowersResultApiResponseFromJSON,
    UserFollowersResultApiResponseToJSON,
    UserFriendsNearByResultApiResponseFromJSON,
    UserFriendsNearByResultApiResponseToJSON,
    UserListResultApiResponseFromJSON,
    UserListResultApiResponseToJSON,
    UserLocationPostResultApiResponseFromJSON,
    UserLocationPostResultApiResponseToJSON,
    UserLocationsResultApiResponseFromJSON,
    UserLocationsResultApiResponseToJSON,
    UserLoginsListApiResponseFromJSON,
    UserLoginsListApiResponseToJSON,
    UserMutualFollowersResultApiResponseFromJSON,
    UserMutualFollowersResultApiResponseToJSON,
    UserMutualFollowingsResultApiResponseFromJSON,
    UserMutualFollowingsResultApiResponseToJSON,
    UserProfileResultApiResponseFromJSON,
    UserProfileResultApiResponseToJSON,
    UserQRCodeScanResultApiResponseFromJSON,
    UserQRCodeScanResultApiResponseToJSON,
} from '../models/index';

export interface UserRequest {
    id: number;
    appKey: string;
}

export interface UserClearRequest {
    appKey: string;
}

export interface UserCommonInterestsRequest {
    appKey: string;
    tag?: string;
    skip?: number;
    take?: number;
}

export interface UserDeactivateHardRequest {
    appKey: string;
}

export interface UserDeleteRequest {
    id: number;
    appKey: string;
}

export interface UserEmailSignInRequest {
    appKey: string;
    emailSignInRequest?: EmailSignInRequest;
}

export interface UserEmailSignUpRequest {
    appKey: string;
    emailSignUpRequest?: EmailSignUpRequest;
}

export interface UserExportRequest {
    appKey: string;
}

export interface UserFollowUserRequest {
    userId: number;
    appKey: string;
}

export interface UserFollowerPutRequest {
    id: number;
    appKey: string;
    followerPutModel?: FollowerPutModel;
}

export interface UserFollowersRequest {
    appKey: string;
    tag?: string;
    status?: string;
    targetUserId?: number;
    skip?: number;
    take?: number;
}

export interface UserFollowingRequest {
    appKey: string;
    tag?: string;
    status?: string;
    targetUserId?: number;
    skip?: number;
    take?: number;
    checkUserId?: number;
    onlyIDs?: boolean;
}

export interface UserFriendsNearByRequest {
    longitude: number;
    latitude: number;
    appKey: string;
    country?: string;
    state?: string;
    city?: string;
    district?: string;
    gender?: string;
    ageS?: number;
    ageE?: number;
    tag?: string;
    distance?: number;
    skip?: number;
    take?: number;
}

export interface UserImportRequest {
    appKey: string;
    check?: boolean;
    file?: Blob;
}

export interface UserLocationRequest {
    id: number;
    appKey: string;
}

export interface UserLocationDeleteRequest {
    id: number;
    appKey: string;
}

export interface UserLocationPostRequest {
    appKey: string;
    geoLocationModel?: GeoLocationModel;
}

export interface UserLocationPutRequest {
    id: number;
    appKey: string;
    geoLocationModel?: GeoLocationModel;
}

export interface UserLocationsRequest {
    appKey: string;
    tag?: string;
    type?: string;
    x?: number;
    y?: number;
    sphere?: number;
    skip?: number;
    take?: number;
}

export interface UserMutualFollowersRequest {
    appKey: string;
    skip?: number;
    take?: number;
}

export interface UserMutualFollowingsRequest {
    appKey: string;
    skip?: number;
    take?: number;
}

export interface UserOAuthAccountBindRequest {
    appKey: string;
    oAuthAccountBindRequest?: OAuthAccountBindRequest;
}

export interface UserOAuthAccountSignInRequest {
    appKey: string;
    oAuthAccountSignInRequest?: OAuthAccountSignInRequest;
}

export interface UserOAuthAccountsRequest {
    appKey: string;
}

export interface UserOAuthAccountsPutBindRequest {
    id: number;
    appKey: string;
    oAuthAccountPutBindRequest?: OAuthAccountPutBindRequest;
}

export interface UserOAuthAccountsUnBindRequest {
    id: number;
    appKey: string;
}

export interface UserPhoneSignInRequest {
    appKey: string;
    phoneSignInRequest?: PhoneSignInRequest;
}

export interface UserPhoneSignUpRequest {
    appKey: string;
    phoneSignUpRequest?: PhoneSignUpRequest;
}

export interface UserProfileRequest {
    appKey: string;
}

export interface UserProfileByIdRequest {
    userId: number;
    appKey: string;
}

export interface UserPutRequest {
    id: number;
    appKey: string;
    user?: User;
}

export interface UserQRCodePreSignInRequest {
    appKey: string;
    qRCodePreSignInRequest?: QRCodePreSignInRequest;
}

export interface UserQRCodeScanRequest {
    appKey: string;
    qRCodeScanRequest?: QRCodeScanRequest;
}

export interface UserQRCodeSignInRequest {
    appKey: string;
    qRCodeSignInRequest?: QRCodeSignInRequest;
}

export interface UserQRCodeSignUpRequest {
    appKey: string;
    qRCodeSignUpRequest?: QRCodeSignUpRequest;
}

export interface UserResetEmailRequest {
    appKey: string;
    appUserResetEmailRequest?: AppUserResetEmailRequest;
}

export interface UserResetPhoneRequest {
    appKey: string;
    appUserResetPhoneRequest?: AppUserResetPhoneRequest;
}

export interface UserResetPwdRequest {
    appKey: string;
    appUserResetPwdRequest?: AppUserResetPwdRequest;
}

export interface UserSendEmailCodeRequest {
    appKey: string;
    sendEmailCodeRequest?: SendEmailCodeRequest;
}

export interface UserSendSMSCodeRequest {
    appKey: string;
    sendSMSCodeRequest?: SendSMSCodeRequest;
}

export interface UserSignInRequest {
    appKey: string;
    signInRequest?: SignInRequest;
}

export interface UserSignUpRequest {
    appKey: string;
    signUpRequest?: SignUpRequest;
}

export interface UserTwoFactorAuthRequest {
    appKey: string;
}

export interface UserUnfollowUserRequest {
    userId: number;
    appKey: string;
}

export interface UserUnionIDSignInRequest {
    appKey: string;
    unionIDSignInRequest?: UnionIDSignInRequest;
}

export interface UserUnionIDSignUpRequest {
    appKey: string;
    unionIDSignUpRequest?: UnionIDSignUpRequest;
}

export interface UserUpdateProfileRequest {
    appKey: string;
    updateProfileRequest?: UpdateProfileRequest;
}

export interface UsersRequest {
    appKey: string;
    userName?: string;
    email?: string;
    phone?: string;
    platform?: string;
    unionId?: string;
    role?: string;
    skip?: number;
    take?: number;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * 根据用户ID获取用户详情
     * @summary 获取用户详情
     * @param {number} id 用户ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userRaw(requestParameters: UserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserApiResponse>>;

    /**
     * 根据用户ID获取用户详情
     * 获取用户详情
     */
    user(requestParameters: UserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserApiResponse>;

    /**
     * 清空用户数据
     * @summary 清空用户数据
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userClearRaw(requestParameters: UserClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 清空用户数据
     * 清空用户数据
     */
    userClear(requestParameters: UserClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 推荐有共同爱好的用户
     * @summary 有共同爱好的用户推荐
     * @param {string} appKey 
     * @param {string} [tag] 兴趣标签
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userCommonInterestsRaw(requestParameters: UserCommonInterestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCommonInterestsResultApiResponse>>;

    /**
     * 推荐有共同爱好的用户
     * 有共同爱好的用户推荐
     */
    userCommonInterests(requestParameters: UserCommonInterestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCommonInterestsResultApiResponse>;

    /**
     * 清除用户所有附属数据，并注销账号
     * @summary 注销账号
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userDeactivateHardRaw(requestParameters: UserDeactivateHardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 清除用户所有附属数据，并注销账号
     * 注销账号
     */
    userDeactivateHard(requestParameters: UserDeactivateHardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据用户ID删除用户
     * @summary 删除用户
     * @param {number} id 用户ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userDeleteRaw(requestParameters: UserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    userDelete(requestParameters: UserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 使用邮箱进行登录
     * @summary 邮箱登录
     * @param {string} appKey 
     * @param {EmailSignInRequest} [emailSignInRequest] 登录请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userEmailSignInRaw(requestParameters: UserEmailSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用邮箱进行登录
     * 邮箱登录
     */
    userEmailSignIn(requestParameters: UserEmailSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 使用邮箱进行注册
     * @summary 邮箱注册
     * @param {string} appKey 
     * @param {EmailSignUpRequest} [emailSignUpRequest] 注册请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userEmailSignUpRaw(requestParameters: UserEmailSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用邮箱进行注册
     * 邮箱注册
     */
    userEmailSignUp(requestParameters: UserEmailSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 导出所有用户数据为Excel文件
     * @summary 导出用户数据
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userExportRaw(requestParameters: UserExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * 导出所有用户数据为Excel文件
     * 导出用户数据
     */
    userExport(requestParameters: UserExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 关注指定用户
     * @summary 关注用户
     * @param {number} userId 要关注的用户ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userFollowUserRaw(requestParameters: UserFollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 关注指定用户
     * 关注用户
     */
    userFollowUser(requestParameters: UserFollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据粉丝ID更新粉丝信息
     * @summary 更新粉丝
     * @param {number} id 粉丝ID
     * @param {string} appKey 
     * @param {FollowerPutModel} [followerPutModel] 更新粉丝的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userFollowerPutRaw(requestParameters: UserFollowerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据粉丝ID更新粉丝信息
     * 更新粉丝
     */
    userFollowerPut(requestParameters: UserFollowerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据条件获取我的粉丝列表
     * @summary 获取我的粉丝列表
     * @param {string} appKey 
     * @param {string} [tag] 标签
     * @param {string} [status] 状态
     * @param {number} [targetUserId] 指定用户的粉丝
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userFollowersRaw(requestParameters: UserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFollowersResultApiResponse>>;

    /**
     * 根据条件获取我的粉丝列表
     * 获取我的粉丝列表
     */
    userFollowers(requestParameters: UserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFollowersResultApiResponse>;

    /**
     * 根据条件获取我的关注列表，或判断是否关注某个用户
     * @summary 获取当前用户的关注列表，或者判断是否关注某个特定用户。
     * @param {string} appKey 
     * @param {string} [tag] 用于过滤关注列表的标签（可选）。
     * @param {string} [status] 用于过滤关注列表的状态（可选）。
     * @param {number} [targetUserId] 指定用户的关注记录，如果不提供则默认为当前用户的关注。
     * @param {number} [skip] 跳过的记录数，用于分页（默认0）。
     * @param {number} [take] 获取的记录数，用于分页（默认10）。
     * @param {number} [checkUserId] 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。
     * @param {boolean} [onlyIDs] 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userFollowingRaw(requestParameters: UserFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据条件获取我的关注列表，或判断是否关注某个用户
     * 获取当前用户的关注列表，或者判断是否关注某个特定用户。
     */
    userFollowing(requestParameters: UserFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
     * @summary 获取附近的用户推荐列表
     * @param {number} longitude 当前用户经度坐标(WGS84坐标系)
     * @param {number} latitude 当前用户纬度坐标(WGS84坐标系)
     * @param {string} appKey 
     * @param {string} [country] 国家过滤条件（精确匹配）
     * @param {string} [state] 省份过滤条件（精确匹配）
     * @param {string} [city] 城市过滤条件（精确匹配）
     * @param {string} [district] 区县过滤条件（精确匹配）
     * @param {string} [gender] 性别过滤条件（可选值示例：Male/Female/Other）
     * @param {number} [ageS] 年龄起始范围（包含，0表示不限制）
     * @param {number} [ageE] 年龄结束范围（包含，0表示不限制）
     * @param {string} [tag] 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;）
     * @param {number} [distance] 搜索半径（单位：米，0表示不限制距离）
     * @param {number} [skip] 跳过的记录数（分页起始位置，默认0）
     * @param {number} [take] 获取的记录数（分页大小，默认10，最大100）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userFriendsNearByRaw(requestParameters: UserFriendsNearByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFriendsNearByResultApiResponse>>;

    /**
     * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
     * 获取附近的用户推荐列表
     */
    userFriendsNearBy(requestParameters: UserFriendsNearByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFriendsNearByResultApiResponse>;

    /**
     * 导入用户数据
     * @summary 导入用户数据
     * @param {string} appKey 
     * @param {boolean} [check] 是否进行检查
     * @param {Blob} [file] 导入的文件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userImportRaw(requestParameters: UserImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 导入用户数据
     * 导入用户数据
     */
    userImport(requestParameters: UserImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据位置ID获取位置详情
     * @summary 获取位置详情
     * @param {number} id 位置ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userLocationRaw(requestParameters: UserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoLocationModelApiResponse>>;

    /**
     * 根据位置ID获取位置详情
     * 获取位置详情
     */
    userLocation(requestParameters: UserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoLocationModelApiResponse>;

    /**
     * 根据位置ID删除位置信息
     * @summary 删除位置
     * @param {number} id 位置ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userLocationDeleteRaw(requestParameters: UserLocationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据位置ID删除位置信息
     * 删除位置
     */
    userLocationDelete(requestParameters: UserLocationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的位置信息
     * @summary 添加位置
     * @param {string} appKey 
     * @param {GeoLocationModel} [geoLocationModel] 位置信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userLocationPostRaw(requestParameters: UserLocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLocationPostResultApiResponse>>;

    /**
     * 添加新的位置信息
     * 添加位置
     */
    userLocationPost(requestParameters: UserLocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLocationPostResultApiResponse>;

    /**
     * 此方法用于更新指定位置ID的位置信息。如果位置不存在，则创建一个新的位置。
     * @summary 更新位置
     * @param {number} id 位置ID
     * @param {string} appKey 
     * @param {GeoLocationModel} [geoLocationModel] 位置信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userLocationPutRaw(requestParameters: UserLocationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 此方法用于更新指定位置ID的位置信息。如果位置不存在，则创建一个新的位置。
     * 更新位置
     */
    userLocationPut(requestParameters: UserLocationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据条件获取位置列表
     * @summary 获取位置列表
     * @param {string} appKey 
     * @param {string} [tag] 标签
     * @param {string} [type] 分类
     * @param {number} [x] 纬度
     * @param {number} [y] 经度
     * @param {number} [sphere] 附近距离，单位：米
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userLocationsRaw(requestParameters: UserLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLocationsResultApiResponse>>;

    /**
     * 根据条件获取位置列表
     * 获取位置列表
     */
    userLocations(requestParameters: UserLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLocationsResultApiResponse>;

    /**
     * 推荐有共同粉丝的用户
     * @summary 有共同粉丝的用户推荐
     * @param {string} appKey 
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userMutualFollowersRaw(requestParameters: UserMutualFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMutualFollowersResultApiResponse>>;

    /**
     * 推荐有共同粉丝的用户
     * 有共同粉丝的用户推荐
     */
    userMutualFollowers(requestParameters: UserMutualFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMutualFollowersResultApiResponse>;

    /**
     * 推荐有共同关注的用户
     * @summary 有共同关注的用户推荐
     * @param {string} appKey 
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userMutualFollowingsRaw(requestParameters: UserMutualFollowingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMutualFollowingsResultApiResponse>>;

    /**
     * 推荐有共同关注的用户
     * 有共同关注的用户推荐
     */
    userMutualFollowings(requestParameters: UserMutualFollowingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMutualFollowingsResultApiResponse>;

    /**
     * 绑定外部账号
     * @summary 外部账号 绑定，如果已存在绑定则直接返回成功
     * @param {string} appKey 
     * @param {OAuthAccountBindRequest} [oAuthAccountBindRequest] 绑定请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userOAuthAccountBindRaw(requestParameters: UserOAuthAccountBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 绑定外部账号
     * 外部账号 绑定，如果已存在绑定则直接返回成功
     */
    userOAuthAccountBind(requestParameters: UserOAuthAccountBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 使用外部账号进行登录
     * @summary 外部账号 登录
     * @param {string} appKey 
     * @param {OAuthAccountSignInRequest} [oAuthAccountSignInRequest] 登录请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userOAuthAccountSignInRaw(requestParameters: UserOAuthAccountSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用外部账号进行登录
     * 外部账号 登录
     */
    userOAuthAccountSignIn(requestParameters: UserOAuthAccountSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 获取外部账号绑定列表
     * @summary 外部账号 绑定列表
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userOAuthAccountsRaw(requestParameters: UserOAuthAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginsListApiResponse>>;

    /**
     * 获取外部账号绑定列表
     * 外部账号 绑定列表
     */
    userOAuthAccounts(requestParameters: UserOAuthAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginsListApiResponse>;

    /**
     * 更新外部账号绑定信息
     * @summary 外部账号 更新绑定
     * @param {number} id 绑定ID
     * @param {string} appKey 
     * @param {OAuthAccountPutBindRequest} [oAuthAccountPutBindRequest] 更新请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userOAuthAccountsPutBindRaw(requestParameters: UserOAuthAccountsPutBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 更新外部账号绑定信息
     * 外部账号 更新绑定
     */
    userOAuthAccountsPutBind(requestParameters: UserOAuthAccountsPutBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 删除外部账号绑定
     * @summary 外部账号 删除绑定
     * @param {number} id 绑定ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userOAuthAccountsUnBindRaw(requestParameters: UserOAuthAccountsUnBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 删除外部账号绑定
     * 外部账号 删除绑定
     */
    userOAuthAccountsUnBind(requestParameters: UserOAuthAccountsUnBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 使用手机号码进行登录
     * @summary 手机登录
     * @param {string} appKey 
     * @param {PhoneSignInRequest} [phoneSignInRequest] 登录请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userPhoneSignInRaw(requestParameters: UserPhoneSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用手机号码进行登录
     * 手机登录
     */
    userPhoneSignIn(requestParameters: UserPhoneSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 使用手机号码进行注册
     * @summary 手机注册
     * @param {string} appKey 
     * @param {PhoneSignUpRequest} [phoneSignUpRequest] 注册请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userPhoneSignUpRaw(requestParameters: UserPhoneSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用手机号码进行注册
     * 手机注册
     */
    userPhoneSignUp(requestParameters: UserPhoneSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 获取当前用户的个人资料
     * @summary 获取个人资料
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userProfileRaw(requestParameters: UserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileResultApiResponse>>;

    /**
     * 获取当前用户的个人资料
     * 获取个人资料
     */
    userProfile(requestParameters: UserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileResultApiResponse>;

    /**
     * 用于他人主页展示
     * @summary 获取指定用户资料
     * @param {number} userId 用户ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userProfileByIdRaw(requestParameters: UserProfileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfileResultApiResponse>>;

    /**
     * 用于他人主页展示
     * 获取指定用户资料
     */
    userProfileById(requestParameters: UserProfileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfileResultApiResponse>;

    /**
     * 根据用户ID更新用户信息
     * @summary 更新用户信息
     * @param {number} id 用户ID
     * @param {string} appKey 
     * @param {User} [user] 用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userPutRaw(requestParameters: UserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据用户ID更新用户信息
     * 更新用户信息
     */
    userPut(requestParameters: UserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 使用微信小程序二维码进行预登陆
     * @summary 微信小程序 - 预登陆
     * @param {string} appKey 
     * @param {QRCodePreSignInRequest} [qRCodePreSignInRequest] 预登陆请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userQRCodePreSignInRaw(requestParameters: UserQRCodePreSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>>;

    /**
     * 使用微信小程序二维码进行预登陆
     * 微信小程序 - 预登陆
     */
    userQRCodePreSignIn(requestParameters: UserQRCodePreSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse>;

    /**
     * 使用微信小程序二维码进行扫码
     * @summary 微信小程序 - 扫码
     * @param {string} appKey 
     * @param {QRCodeScanRequest} [qRCodeScanRequest] 扫码请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userQRCodeScanRaw(requestParameters: UserQRCodeScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserQRCodeScanResultApiResponse>>;

    /**
     * 使用微信小程序二维码进行扫码
     * 微信小程序 - 扫码
     */
    userQRCodeScan(requestParameters: UserQRCodeScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserQRCodeScanResultApiResponse>;

    /**
     * 使用微信小程序二维码进行网页登录
     * @summary 微信小程序 - 网页登录
     * @param {string} appKey 
     * @param {QRCodeSignInRequest} [qRCodeSignInRequest] 登录请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userQRCodeSignInRaw(requestParameters: UserQRCodeSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用微信小程序二维码进行网页登录
     * 微信小程序 - 网页登录
     */
    userQRCodeSignIn(requestParameters: UserQRCodeSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 使用微信小程序二维码进行注册
     * @summary 微信小程序 - 注册
     * @param {string} appKey 
     * @param {QRCodeSignUpRequest} [qRCodeSignUpRequest] 注册请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userQRCodeSignUpRaw(requestParameters: UserQRCodeSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用微信小程序二维码进行注册
     * 微信小程序 - 注册
     */
    userQRCodeSignUp(requestParameters: UserQRCodeSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 通过邮箱验证码重置邮箱
     * @summary 重置邮箱
     * @param {string} appKey 
     * @param {AppUserResetEmailRequest} [appUserResetEmailRequest] 重置邮箱的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userResetEmailRaw(requestParameters: UserResetEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 通过邮箱验证码重置邮箱
     * 重置邮箱
     */
    userResetEmail(requestParameters: UserResetEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 通过手机号验证码重置手机号
     * @summary 重置手机号
     * @param {string} appKey 
     * @param {AppUserResetPhoneRequest} [appUserResetPhoneRequest] 重置手机号的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userResetPhoneRaw(requestParameters: UserResetPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 通过手机号验证码重置手机号
     * 重置手机号
     */
    userResetPhone(requestParameters: UserResetPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 通过手机号或邮箱重置密码
     * @summary 重置密码
     * @param {string} appKey 
     * @param {AppUserResetPwdRequest} [appUserResetPwdRequest] 重置密码的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userResetPwdRaw(requestParameters: UserResetPwdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 通过手机号或邮箱重置密码
     * 重置密码
     */
    userResetPwd(requestParameters: UserResetPwdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 发送邮箱验证码用于注册或找回密码
     * @summary 发送邮箱验证码
     * @param {string} appKey 
     * @param {SendEmailCodeRequest} [sendEmailCodeRequest] 发送邮箱验证码的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userSendEmailCodeRaw(requestParameters: UserSendEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 发送邮箱验证码用于注册或找回密码
     * 发送邮箱验证码
     */
    userSendEmailCode(requestParameters: UserSendEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 发送手机验证码用于注册或找回密码
     * @summary 发送手机验证码
     * @param {string} appKey 
     * @param {SendSMSCodeRequest} [sendSMSCodeRequest] 发送手机验证码的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userSendSMSCodeRaw(requestParameters: UserSendSMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 发送手机验证码用于注册或找回密码
     * 发送手机验证码
     */
    userSendSMSCode(requestParameters: UserSendSMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 使用账号密码进行登录
     * @summary 账号密码 登录
     * @param {string} appKey 
     * @param {SignInRequest} [signInRequest] 登录请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userSignInRaw(requestParameters: UserSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用账号密码进行登录
     * 账号密码 登录
     */
    userSignIn(requestParameters: UserSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 使用账号密码进行注册
     * @summary 账号密码 注册
     * @param {string} appKey 
     * @param {SignUpRequest} [signUpRequest] 注册请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userSignUpRaw(requestParameters: UserSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用账号密码进行注册
     * 账号密码 注册
     */
    userSignUp(requestParameters: UserSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 获取双因素验证的设置信息
     * @summary 双因素验证
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userTwoFactorAuthRaw(requestParameters: UserTwoFactorAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupCodeApiResponse>>;

    /**
     * 获取双因素验证的设置信息
     * 双因素验证
     */
    userTwoFactorAuth(requestParameters: UserTwoFactorAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupCodeApiResponse>;

    /**
     * 取消关注指定用户
     * @summary 取消关注
     * @param {number} userId 要取消关注的用户ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userUnfollowUserRaw(requestParameters: UserUnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 取消关注指定用户
     * 取消关注
     */
    userUnfollowUser(requestParameters: UserUnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 使用UnionID进行登录
     * @summary UnionID登录
     * @param {string} appKey 
     * @param {UnionIDSignInRequest} [unionIDSignInRequest] 登录请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userUnionIDSignInRaw(requestParameters: UserUnionIDSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用UnionID进行登录
     * UnionID登录
     */
    userUnionIDSignIn(requestParameters: UserUnionIDSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 使用UnionID进行注册
     * @summary UnionID注册
     * @param {string} appKey 
     * @param {UnionIDSignUpRequest} [unionIDSignUpRequest] 注册请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userUnionIDSignUpRaw(requestParameters: UserUnionIDSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>>;

    /**
     * 使用UnionID进行注册
     * UnionID注册
     */
    userUnionIDSignUp(requestParameters: UserUnionIDSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse>;

    /**
     * 更新当前用户的个人资料
     * @summary 更新个人资料
     * @param {string} appKey 
     * @param {UpdateProfileRequest} [updateProfileRequest] 更新个人资料的请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userUpdateProfileRaw(requestParameters: UserUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 更新当前用户的个人资料
     * 更新个人资料
     */
    userUpdateProfile(requestParameters: UserUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据条件获取用户列表
     * @summary 获取用户列表
     * @param {string} appKey 
     * @param {string} [userName] 用户名
     * @param {string} [email] 邮箱
     * @param {string} [phone] 电话
     * @param {string} [platform] 平台
     * @param {string} [unionId] 联合ID
     * @param {string} [role] 角色
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    usersRaw(requestParameters: UsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserListResultApiResponse>>;

    /**
     * 根据条件获取用户列表
     * 获取用户列表
     */
    users(requestParameters: UsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserListResultApiResponse>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * 根据用户ID获取用户详情
     * 获取用户详情
     */
    async userRaw(requestParameters: UserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling user().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling user().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID获取用户详情
     * 获取用户详情
     */
    async user(requestParameters: UserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserApiResponse> {
        const response = await this.userRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 清空用户数据
     * 清空用户数据
     */
    async userClearRaw(requestParameters: UserClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userClear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Clear`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 清空用户数据
     * 清空用户数据
     */
    async userClear(requestParameters: UserClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userClearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 推荐有共同爱好的用户
     * 有共同爱好的用户推荐
     */
    async userCommonInterestsRaw(requestParameters: UserCommonInterestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCommonInterestsResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userCommonInterests().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Friends/CommonInterests`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCommonInterestsResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 推荐有共同爱好的用户
     * 有共同爱好的用户推荐
     */
    async userCommonInterests(requestParameters: UserCommonInterestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCommonInterestsResultApiResponse> {
        const response = await this.userCommonInterestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 清除用户所有附属数据，并注销账号
     * 注销账号
     */
    async userDeactivateHardRaw(requestParameters: UserDeactivateHardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userDeactivateHard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/DeactivateHard`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 清除用户所有附属数据，并注销账号
     * 注销账号
     */
    async userDeactivateHard(requestParameters: UserDeactivateHardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userDeactivateHardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    async userDeleteRaw(requestParameters: UserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID删除用户
     * 删除用户
     */
    async userDelete(requestParameters: UserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱进行登录
     * 邮箱登录
     */
    async userEmailSignInRaw(requestParameters: UserEmailSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userEmailSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/EmailSignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSignInRequestToJSON(requestParameters['emailSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用邮箱进行登录
     * 邮箱登录
     */
    async userEmailSignIn(requestParameters: UserEmailSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userEmailSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用邮箱进行注册
     * 邮箱注册
     */
    async userEmailSignUpRaw(requestParameters: UserEmailSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userEmailSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/EmailSignUp`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSignUpRequestToJSON(requestParameters['emailSignUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用邮箱进行注册
     * 邮箱注册
     */
    async userEmailSignUp(requestParameters: UserEmailSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userEmailSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 导出所有用户数据为Excel文件
     * 导出用户数据
     */
    async userExportRaw(requestParameters: UserExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Export`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 导出所有用户数据为Excel文件
     * 导出用户数据
     */
    async userExport(requestParameters: UserExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.userExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 关注指定用户
     * 关注用户
     */
    async userFollowUserRaw(requestParameters: UserFollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userFollowUser().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userFollowUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Follower/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 关注指定用户
     * 关注用户
     */
    async userFollowUser(requestParameters: UserFollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userFollowUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据粉丝ID更新粉丝信息
     * 更新粉丝
     */
    async userFollowerPutRaw(requestParameters: UserFollowerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userFollowerPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userFollowerPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Follower/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FollowerPutModelToJSON(requestParameters['followerPutModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据粉丝ID更新粉丝信息
     * 更新粉丝
     */
    async userFollowerPut(requestParameters: UserFollowerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userFollowerPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据条件获取我的粉丝列表
     * 获取我的粉丝列表
     */
    async userFollowersRaw(requestParameters: UserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFollowersResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userFollowers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['targetUserId'] != null) {
            queryParameters['targetUserId'] = requestParameters['targetUserId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Followers`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFollowersResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据条件获取我的粉丝列表
     * 获取我的粉丝列表
     */
    async userFollowers(requestParameters: UserFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFollowersResultApiResponse> {
        const response = await this.userFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据条件获取我的关注列表，或判断是否关注某个用户
     * 获取当前用户的关注列表，或者判断是否关注某个特定用户。
     */
    async userFollowingRaw(requestParameters: UserFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userFollowing().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['targetUserId'] != null) {
            queryParameters['targetUserId'] = requestParameters['targetUserId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['checkUserId'] != null) {
            queryParameters['checkUserId'] = requestParameters['checkUserId'];
        }

        if (requestParameters['onlyIDs'] != null) {
            queryParameters['onlyIDs'] = requestParameters['onlyIDs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Following`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据条件获取我的关注列表，或判断是否关注某个用户
     * 获取当前用户的关注列表，或者判断是否关注某个特定用户。
     */
    async userFollowing(requestParameters: UserFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
     * 获取附近的用户推荐列表
     */
    async userFriendsNearByRaw(requestParameters: UserFriendsNearByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserFriendsNearByResultApiResponse>> {
        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling userFriendsNearBy().'
            );
        }

        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling userFriendsNearBy().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userFriendsNearBy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['longitude'] != null) {
            queryParameters['longitude'] = requestParameters['longitude'];
        }

        if (requestParameters['latitude'] != null) {
            queryParameters['latitude'] = requestParameters['latitude'];
        }

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        if (requestParameters['district'] != null) {
            queryParameters['district'] = requestParameters['district'];
        }

        if (requestParameters['gender'] != null) {
            queryParameters['gender'] = requestParameters['gender'];
        }

        if (requestParameters['ageS'] != null) {
            queryParameters['ageS'] = requestParameters['ageS'];
        }

        if (requestParameters['ageE'] != null) {
            queryParameters['ageE'] = requestParameters['ageE'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['distance'] != null) {
            queryParameters['distance'] = requestParameters['distance'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Friends/NearBy`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFriendsNearByResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
     * 获取附近的用户推荐列表
     */
    async userFriendsNearBy(requestParameters: UserFriendsNearByRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserFriendsNearByResultApiResponse> {
        const response = await this.userFriendsNearByRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 导入用户数据
     * 导入用户数据
     */
    async userImportRaw(requestParameters: UserImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userImport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['check'] != null) {
            queryParameters['check'] = requestParameters['check'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/User/{appKey}/Import`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 导入用户数据
     * 导入用户数据
     */
    async userImport(requestParameters: UserImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据位置ID获取位置详情
     * 获取位置详情
     */
    async userLocationRaw(requestParameters: UserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeoLocationModelApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userLocation().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Location/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeoLocationModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据位置ID获取位置详情
     * 获取位置详情
     */
    async userLocation(requestParameters: UserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeoLocationModelApiResponse> {
        const response = await this.userLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据位置ID删除位置信息
     * 删除位置
     */
    async userLocationDeleteRaw(requestParameters: UserLocationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userLocationDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userLocationDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Location/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据位置ID删除位置信息
     * 删除位置
     */
    async userLocationDelete(requestParameters: UserLocationDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userLocationDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的位置信息
     * 添加位置
     */
    async userLocationPostRaw(requestParameters: UserLocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLocationPostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userLocationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Location`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeoLocationModelToJSON(requestParameters['geoLocationModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLocationPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的位置信息
     * 添加位置
     */
    async userLocationPost(requestParameters: UserLocationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLocationPostResultApiResponse> {
        const response = await this.userLocationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 此方法用于更新指定位置ID的位置信息。如果位置不存在，则创建一个新的位置。
     * 更新位置
     */
    async userLocationPutRaw(requestParameters: UserLocationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userLocationPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userLocationPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Location/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GeoLocationModelToJSON(requestParameters['geoLocationModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 此方法用于更新指定位置ID的位置信息。如果位置不存在，则创建一个新的位置。
     * 更新位置
     */
    async userLocationPut(requestParameters: UserLocationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userLocationPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据条件获取位置列表
     * 获取位置列表
     */
    async userLocationsRaw(requestParameters: UserLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLocationsResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['x'] != null) {
            queryParameters['x'] = requestParameters['x'];
        }

        if (requestParameters['y'] != null) {
            queryParameters['y'] = requestParameters['y'];
        }

        if (requestParameters['sphere'] != null) {
            queryParameters['sphere'] = requestParameters['sphere'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Locations`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLocationsResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据条件获取位置列表
     * 获取位置列表
     */
    async userLocations(requestParameters: UserLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLocationsResultApiResponse> {
        const response = await this.userLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 推荐有共同粉丝的用户
     * 有共同粉丝的用户推荐
     */
    async userMutualFollowersRaw(requestParameters: UserMutualFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMutualFollowersResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userMutualFollowers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Friends/MutualFollowers`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMutualFollowersResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 推荐有共同粉丝的用户
     * 有共同粉丝的用户推荐
     */
    async userMutualFollowers(requestParameters: UserMutualFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMutualFollowersResultApiResponse> {
        const response = await this.userMutualFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 推荐有共同关注的用户
     * 有共同关注的用户推荐
     */
    async userMutualFollowingsRaw(requestParameters: UserMutualFollowingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMutualFollowingsResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userMutualFollowings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Friends/MutualFollowings`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMutualFollowingsResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 推荐有共同关注的用户
     * 有共同关注的用户推荐
     */
    async userMutualFollowings(requestParameters: UserMutualFollowingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMutualFollowingsResultApiResponse> {
        const response = await this.userMutualFollowingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 绑定外部账号
     * 外部账号 绑定，如果已存在绑定则直接返回成功
     */
    async userOAuthAccountBindRaw(requestParameters: UserOAuthAccountBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userOAuthAccountBind().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/OAuthAccountBind`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthAccountBindRequestToJSON(requestParameters['oAuthAccountBindRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 绑定外部账号
     * 外部账号 绑定，如果已存在绑定则直接返回成功
     */
    async userOAuthAccountBind(requestParameters: UserOAuthAccountBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userOAuthAccountBindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用外部账号进行登录
     * 外部账号 登录
     */
    async userOAuthAccountSignInRaw(requestParameters: UserOAuthAccountSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userOAuthAccountSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/OAuthAccountSignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthAccountSignInRequestToJSON(requestParameters['oAuthAccountSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用外部账号进行登录
     * 外部账号 登录
     */
    async userOAuthAccountSignIn(requestParameters: UserOAuthAccountSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userOAuthAccountSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取外部账号绑定列表
     * 外部账号 绑定列表
     */
    async userOAuthAccountsRaw(requestParameters: UserOAuthAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginsListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userOAuthAccounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/OAuthAccounts`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginsListApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取外部账号绑定列表
     * 外部账号 绑定列表
     */
    async userOAuthAccounts(requestParameters: UserOAuthAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginsListApiResponse> {
        const response = await this.userOAuthAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新外部账号绑定信息
     * 外部账号 更新绑定
     */
    async userOAuthAccountsPutBindRaw(requestParameters: UserOAuthAccountsPutBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userOAuthAccountsPutBind().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userOAuthAccountsPutBind().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/OAuthAccounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OAuthAccountPutBindRequestToJSON(requestParameters['oAuthAccountPutBindRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 更新外部账号绑定信息
     * 外部账号 更新绑定
     */
    async userOAuthAccountsPutBind(requestParameters: UserOAuthAccountsPutBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userOAuthAccountsPutBindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除外部账号绑定
     * 外部账号 删除绑定
     */
    async userOAuthAccountsUnBindRaw(requestParameters: UserOAuthAccountsUnBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userOAuthAccountsUnBind().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userOAuthAccountsUnBind().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/OAuthAccounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 删除外部账号绑定
     * 外部账号 删除绑定
     */
    async userOAuthAccountsUnBind(requestParameters: UserOAuthAccountsUnBindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userOAuthAccountsUnBindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用手机号码进行登录
     * 手机登录
     */
    async userPhoneSignInRaw(requestParameters: UserPhoneSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userPhoneSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/PhoneSignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhoneSignInRequestToJSON(requestParameters['phoneSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用手机号码进行登录
     * 手机登录
     */
    async userPhoneSignIn(requestParameters: UserPhoneSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userPhoneSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用手机号码进行注册
     * 手机注册
     */
    async userPhoneSignUpRaw(requestParameters: UserPhoneSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userPhoneSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/PhoneSignUp`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhoneSignUpRequestToJSON(requestParameters['phoneSignUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用手机号码进行注册
     * 手机注册
     */
    async userPhoneSignUp(requestParameters: UserPhoneSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userPhoneSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取当前用户的个人资料
     * 获取个人资料
     */
    async userProfileRaw(requestParameters: UserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Profile`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取当前用户的个人资料
     * 获取个人资料
     */
    async userProfile(requestParameters: UserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileResultApiResponse> {
        const response = await this.userProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用于他人主页展示
     * 获取指定用户资料
     */
    async userProfileByIdRaw(requestParameters: UserProfileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfileResultApiResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userProfileById().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userProfileById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Profile/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserProfileResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 用于他人主页展示
     * 获取指定用户资料
     */
    async userProfileById(requestParameters: UserProfileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfileResultApiResponse> {
        const response = await this.userProfileByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID更新用户信息
     * 更新用户信息
     */
    async userPutRaw(requestParameters: UserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID更新用户信息
     * 更新用户信息
     */
    async userPut(requestParameters: UserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用微信小程序二维码进行预登陆
     * 微信小程序 - 预登陆
     */
    async userQRCodePreSignInRaw(requestParameters: UserQRCodePreSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userQRCodePreSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/QRCodePreSignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QRCodePreSignInRequestToJSON(requestParameters['qRCodePreSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Int64ApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用微信小程序二维码进行预登陆
     * 微信小程序 - 预登陆
     */
    async userQRCodePreSignIn(requestParameters: UserQRCodePreSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse> {
        const response = await this.userQRCodePreSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用微信小程序二维码进行扫码
     * 微信小程序 - 扫码
     */
    async userQRCodeScanRaw(requestParameters: UserQRCodeScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserQRCodeScanResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userQRCodeScan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/QRCodeScan`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QRCodeScanRequestToJSON(requestParameters['qRCodeScanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserQRCodeScanResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用微信小程序二维码进行扫码
     * 微信小程序 - 扫码
     */
    async userQRCodeScan(requestParameters: UserQRCodeScanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserQRCodeScanResultApiResponse> {
        const response = await this.userQRCodeScanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用微信小程序二维码进行网页登录
     * 微信小程序 - 网页登录
     */
    async userQRCodeSignInRaw(requestParameters: UserQRCodeSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userQRCodeSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/QRCodeSignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QRCodeSignInRequestToJSON(requestParameters['qRCodeSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用微信小程序二维码进行网页登录
     * 微信小程序 - 网页登录
     */
    async userQRCodeSignIn(requestParameters: UserQRCodeSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userQRCodeSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用微信小程序二维码进行注册
     * 微信小程序 - 注册
     */
    async userQRCodeSignUpRaw(requestParameters: UserQRCodeSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userQRCodeSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/QRCodeSignUp`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QRCodeSignUpRequestToJSON(requestParameters['qRCodeSignUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用微信小程序二维码进行注册
     * 微信小程序 - 注册
     */
    async userQRCodeSignUp(requestParameters: UserQRCodeSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userQRCodeSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过邮箱验证码重置邮箱
     * 重置邮箱
     */
    async userResetEmailRaw(requestParameters: UserResetEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userResetEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/ResetEmail`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppUserResetEmailRequestToJSON(requestParameters['appUserResetEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 通过邮箱验证码重置邮箱
     * 重置邮箱
     */
    async userResetEmail(requestParameters: UserResetEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userResetEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过手机号验证码重置手机号
     * 重置手机号
     */
    async userResetPhoneRaw(requestParameters: UserResetPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userResetPhone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/ResetPhone`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppUserResetPhoneRequestToJSON(requestParameters['appUserResetPhoneRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 通过手机号验证码重置手机号
     * 重置手机号
     */
    async userResetPhone(requestParameters: UserResetPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userResetPhoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过手机号或邮箱重置密码
     * 重置密码
     */
    async userResetPwdRaw(requestParameters: UserResetPwdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userResetPwd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/ResetPwd`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppUserResetPwdRequestToJSON(requestParameters['appUserResetPwdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 通过手机号或邮箱重置密码
     * 重置密码
     */
    async userResetPwd(requestParameters: UserResetPwdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userResetPwdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 发送邮箱验证码用于注册或找回密码
     * 发送邮箱验证码
     */
    async userSendEmailCodeRaw(requestParameters: UserSendEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSendEmailCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/SendEmailCode`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendEmailCodeRequestToJSON(requestParameters['sendEmailCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 发送邮箱验证码用于注册或找回密码
     * 发送邮箱验证码
     */
    async userSendEmailCode(requestParameters: UserSendEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userSendEmailCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 发送手机验证码用于注册或找回密码
     * 发送手机验证码
     */
    async userSendSMSCodeRaw(requestParameters: UserSendSMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSendSMSCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/SendSMSCode`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendSMSCodeRequestToJSON(requestParameters['sendSMSCodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 发送手机验证码用于注册或找回密码
     * 发送手机验证码
     */
    async userSendSMSCode(requestParameters: UserSendSMSCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userSendSMSCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用账号密码进行登录
     * 账号密码 登录
     */
    async userSignInRaw(requestParameters: UserSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/SignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestToJSON(requestParameters['signInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用账号密码进行登录
     * 账号密码 登录
     */
    async userSignIn(requestParameters: UserSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用账号密码进行注册
     * 账号密码 注册
     */
    async userSignUpRaw(requestParameters: UserSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/SignUp`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpRequestToJSON(requestParameters['signUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用账号密码进行注册
     * 账号密码 注册
     */
    async userSignUp(requestParameters: UserSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取双因素验证的设置信息
     * 双因素验证
     */
    async userTwoFactorAuthRaw(requestParameters: UserTwoFactorAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupCodeApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userTwoFactorAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/TwoFactorAuth`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetupCodeApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取双因素验证的设置信息
     * 双因素验证
     */
    async userTwoFactorAuth(requestParameters: UserTwoFactorAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupCodeApiResponse> {
        const response = await this.userTwoFactorAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 取消关注指定用户
     * 取消关注
     */
    async userUnfollowUserRaw(requestParameters: UserUnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userUnfollowUser().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userUnfollowUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Follower/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 取消关注指定用户
     * 取消关注
     */
    async userUnfollowUser(requestParameters: UserUnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userUnfollowUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用UnionID进行登录
     * UnionID登录
     */
    async userUnionIDSignInRaw(requestParameters: UserUnionIDSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userUnionIDSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/UnionIDSignIn`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnionIDSignInRequestToJSON(requestParameters['unionIDSignInRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用UnionID进行登录
     * UnionID登录
     */
    async userUnionIDSignIn(requestParameters: UserUnionIDSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userUnionIDSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 使用UnionID进行注册
     * UnionID注册
     */
    async userUnionIDSignUpRaw(requestParameters: UserUnionIDSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenModelApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userUnionIDSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/UnionIDSignUp`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnionIDSignUpRequestToJSON(requestParameters['unionIDSignUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenModelApiResponseFromJSON(jsonValue));
    }

    /**
     * 使用UnionID进行注册
     * UnionID注册
     */
    async userUnionIDSignUp(requestParameters: UserUnionIDSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenModelApiResponse> {
        const response = await this.userUnionIDSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新当前用户的个人资料
     * 更新个人资料
     */
    async userUpdateProfileRaw(requestParameters: UserUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userUpdateProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}/Profile`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestToJSON(requestParameters['updateProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 更新当前用户的个人资料
     * 更新个人资料
     */
    async userUpdateProfile(requestParameters: UserUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userUpdateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据条件获取用户列表
     * 获取用户列表
     */
    async usersRaw(requestParameters: UsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserListResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling users().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userName'] != null) {
            queryParameters['userName'] = requestParameters['userName'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['phone'] != null) {
            queryParameters['phone'] = requestParameters['phone'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        if (requestParameters['unionId'] != null) {
            queryParameters['unionId'] = requestParameters['unionId'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/User/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据条件获取用户列表
     * 获取用户列表
     */
    async users(requestParameters: UsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserListResultApiResponse> {
        const response = await this.usersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
