/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  FileListResultApiResponse,
  StringApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    FileListResultApiResponseFromJSON,
    FileListResultApiResponseToJSON,
    StringApiResponseFromJSON,
    StringApiResponseToJSON,
} from '../models/index';

export interface FileCreateFolderRequest {
    appKey: string;
    path?: string;
}

export interface FileDeleteRequest {
    appKey: string;
    path?: string;
}

export interface FileRenameRequest {
    appKey: string;
    sourceName?: string;
    destName?: string;
}

export interface FileUploadRequest {
    appKey: string;
    path?: string;
    file?: Blob;
}

export interface FilesRequest {
    appKey: string;
    path?: string;
    skip?: number;
    take?: number;
}

/**
 * FileApi - interface
 * 
 * @export
 * @interface FileApiInterface
 */
export interface FileApiInterface {
    /**
     * 在指定路径创建文件夹
     * @summary 创建文件夹
     * @param {string} appKey 
     * @param {string} [path] 文件夹路径
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    fileCreateFolderRaw(requestParameters: FileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 在指定路径创建文件夹
     * 创建文件夹
     */
    fileCreateFolder(requestParameters: FileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据指定路径删除文件或文件夹
     * @summary 删除文件或文件夹
     * @param {string} appKey 
     * @param {string} [path] 文件或文件夹路径
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    fileDeleteRaw(requestParameters: FileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据指定路径删除文件或文件夹
     * 删除文件或文件夹
     */
    fileDelete(requestParameters: FileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 将指定的文件或文件夹重命名
     * @summary 重命名文件或文件夹
     * @param {string} appKey 
     * @param {string} [sourceName] 原文件或文件夹名称
     * @param {string} [destName] 新文件或文件夹名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    fileRenameRaw(requestParameters: FileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 将指定的文件或文件夹重命名
     * 重命名文件或文件夹
     */
    fileRename(requestParameters: FileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 将文件上传到指定路径
     * @summary 上传文件
     * @param {string} appKey 
     * @param {string} [path] 文件夹路径
     * @param {Blob} [file] 上传的文件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    fileUploadRaw(requestParameters: FileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 将文件上传到指定路径
     * 上传文件
     */
    fileUpload(requestParameters: FileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 根据指定路径获取文件和文件夹列表
     * @summary 获取文件列表
     * @param {string} appKey 
     * @param {string} [path] 文件路径
     * @param {number} [skip] 跳过的记录数
     * @param {number} [take] 获取的记录数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApiInterface
     */
    filesRaw(requestParameters: FilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileListResultApiResponse>>;

    /**
     * 根据指定路径获取文件和文件夹列表
     * 获取文件列表
     */
    files(requestParameters: FilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileListResultApiResponse>;

}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI implements FileApiInterface {

    /**
     * 在指定路径创建文件夹
     * 创建文件夹
     */
    async fileCreateFolderRaw(requestParameters: FileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling fileCreateFolder().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/File/{appKey}/CreateFolder`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 在指定路径创建文件夹
     * 创建文件夹
     */
    async fileCreateFolder(requestParameters: FileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.fileCreateFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据指定路径删除文件或文件夹
     * 删除文件或文件夹
     */
    async fileDeleteRaw(requestParameters: FileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling fileDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/File/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定路径删除文件或文件夹
     * 删除文件或文件夹
     */
    async fileDelete(requestParameters: FileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.fileDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将指定的文件或文件夹重命名
     * 重命名文件或文件夹
     */
    async fileRenameRaw(requestParameters: FileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling fileRename().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sourceName'] != null) {
            queryParameters['sourceName'] = requestParameters['sourceName'];
        }

        if (requestParameters['destName'] != null) {
            queryParameters['destName'] = requestParameters['destName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/File/{appKey}/Rename`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 将指定的文件或文件夹重命名
     * 重命名文件或文件夹
     */
    async fileRename(requestParameters: FileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.fileRenameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将文件上传到指定路径
     * 上传文件
     */
    async fileUploadRaw(requestParameters: FileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling fileUpload().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/File/{appKey}/Upload`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 将文件上传到指定路径
     * 上传文件
     */
    async fileUpload(requestParameters: FileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.fileUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据指定路径获取文件和文件夹列表
     * 获取文件列表
     */
    async filesRaw(requestParameters: FilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileListResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling files().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/File/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定路径获取文件和文件夹列表
     * 获取文件列表
     */
    async files(requestParameters: FilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileListResultApiResponse> {
        const response = await this.filesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
