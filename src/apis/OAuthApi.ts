/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppUserConsentModelListApiResponse,
  AuthorizeResultApiResponse,
  BooleanApiResponse,
  GrantRequest,
  GrantResultApiResponse,
  ProfileResultApiResponse,
} from '../models/index';
import {
    AppUserConsentModelListApiResponseFromJSON,
    AppUserConsentModelListApiResponseToJSON,
    AuthorizeResultApiResponseFromJSON,
    AuthorizeResultApiResponseToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    GrantRequestFromJSON,
    GrantRequestToJSON,
    GrantResultApiResponseFromJSON,
    GrantResultApiResponseToJSON,
    ProfileResultApiResponseFromJSON,
    ProfileResultApiResponseToJSON,
} from '../models/index';

export interface OAuthAuthorizeRequest {
    appKey: string;
    scheme?: string;
    code?: string;
}

export interface OAuthConsentsRequest {
    appKey: string;
}

export interface OAuthDeleteConsentRequest {
    id: number;
    appKey: string;
}

export interface OAuthGrantCodeRequest {
    appKey: string;
    scheme?: string;
    grantRequest?: GrantRequest;
}

export interface OAuthProfileRequest {
    appKey: string;
}

/**
 * OAuthApi - interface
 * 
 * @export
 * @interface OAuthApiInterface
 */
export interface OAuthApiInterface {
    /**
     * 
     * @summary 获取access_token
     * @param {string} appKey 
     * @param {string} [scheme] 身份源
     * @param {string} [code] 授权码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthAuthorizeRaw(requestParameters: OAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeResultApiResponse>>;

    /**
     * 获取access_token
     */
    oAuthAuthorize(requestParameters: OAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeResultApiResponse>;

    /**
     * 
     * @summary 授权记录
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthConsentsRaw(requestParameters: OAuthConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppUserConsentModelListApiResponse>>;

    /**
     * 授权记录
     */
    oAuthConsents(requestParameters: OAuthConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppUserConsentModelListApiResponse>;

    /**
     * 
     * @summary 删除授权记录
     * @param {number} id 
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthDeleteConsentRaw(requestParameters: OAuthDeleteConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 删除授权记录
     */
    oAuthDeleteConsent(requestParameters: OAuthDeleteConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 
     * @summary 申请授权码
     * @param {string} appKey 
     * @param {string} [scheme] 身份源，固定填：app
     * @param {GrantRequest} [grantRequest] 授权详情
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthGrantCodeRaw(requestParameters: OAuthGrantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GrantResultApiResponse>>;

    /**
     * 申请授权码
     */
    oAuthGrantCode(requestParameters: OAuthGrantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GrantResultApiResponse>;

    /**
     * 
     * @summary 获取个人资料
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApiInterface
     */
    oAuthProfileRaw(requestParameters: OAuthProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResultApiResponse>>;

    /**
     * 获取个人资料
     */
    oAuthProfile(requestParameters: OAuthProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResultApiResponse>;

}

/**
 * 
 */
export class OAuthApi extends runtime.BaseAPI implements OAuthApiInterface {

    /**
     * 获取access_token
     */
    async oAuthAuthorizeRaw(requestParameters: OAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling oAuthAuthorize().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scheme'] != null) {
            queryParameters['scheme'] = requestParameters['scheme'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/OAuth/{appKey}/Authorize`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizeResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取access_token
     */
    async oAuthAuthorize(requestParameters: OAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeResultApiResponse> {
        const response = await this.oAuthAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 授权记录
     */
    async oAuthConsentsRaw(requestParameters: OAuthConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppUserConsentModelListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling oAuthConsents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/OAuth/{appKey}/Consents`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppUserConsentModelListApiResponseFromJSON(jsonValue));
    }

    /**
     * 授权记录
     */
    async oAuthConsents(requestParameters: OAuthConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppUserConsentModelListApiResponse> {
        const response = await this.oAuthConsentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除授权记录
     */
    async oAuthDeleteConsentRaw(requestParameters: OAuthDeleteConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling oAuthDeleteConsent().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling oAuthDeleteConsent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/OAuth/{appKey}/Consents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 删除授权记录
     */
    async oAuthDeleteConsent(requestParameters: OAuthDeleteConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.oAuthDeleteConsentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 申请授权码
     */
    async oAuthGrantCodeRaw(requestParameters: OAuthGrantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GrantResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling oAuthGrantCode().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['scheme'] != null) {
            queryParameters['scheme'] = requestParameters['scheme'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/OAuth/{appKey}/GrantCode`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GrantRequestToJSON(requestParameters['grantRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrantResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 申请授权码
     */
    async oAuthGrantCode(requestParameters: OAuthGrantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GrantResultApiResponse> {
        const response = await this.oAuthGrantCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取个人资料
     */
    async oAuthProfileRaw(requestParameters: OAuthProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling oAuthProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/OAuth/{appKey}/Profile`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取个人资料
     */
    async oAuthProfile(requestParameters: OAuthProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResultApiResponse> {
        const response = await this.oAuthProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
