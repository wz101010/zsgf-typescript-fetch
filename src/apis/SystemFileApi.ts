/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  StringApiResponse,
  SystemFileListResultApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    StringApiResponseFromJSON,
    StringApiResponseToJSON,
    SystemFileListResultApiResponseFromJSON,
    SystemFileListResultApiResponseToJSON,
} from '../models/index';

export interface SystemFileCreateFolderRequest {
    path?: string;
}

export interface SystemFileDeleteRequest {
    path?: string;
}

export interface SystemFileRenameRequest {
    sourceName?: string;
    destName?: string;
}

export interface SystemFileUploadRequest {
    path?: string;
    file?: Blob;
}

export interface SystemFilesRequest {
    path?: string;
}

/**
 * SystemFileApi - interface
 * 
 * @export
 * @interface SystemFileApiInterface
 */
export interface SystemFileApiInterface {
    /**
     * 根据指定路径创建文件夹
     * @summary 创建文件夹
     * @param {string} [path] 文件夹路径
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFileApiInterface
     */
    systemFileCreateFolderRaw(requestParameters: SystemFileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据指定路径创建文件夹
     * 创建文件夹
     */
    systemFileCreateFolder(requestParameters: SystemFileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据指定路径删除文件
     * @summary 删除文件
     * @param {string} [path] 文件路径
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFileApiInterface
     */
    systemFileDeleteRaw(requestParameters: SystemFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据指定路径删除文件
     * 删除文件
     */
    systemFileDelete(requestParameters: SystemFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据指定的源文件名和目标文件名重命名文件
     * @summary 重命名文件
     * @param {string} [sourceName] 源文件名
     * @param {string} [destName] 目标文件名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFileApiInterface
     */
    systemFileRenameRaw(requestParameters: SystemFileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据指定的源文件名和目标文件名重命名文件
     * 重命名文件
     */
    systemFileRename(requestParameters: SystemFileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据指定路径上传文件
     * @summary 上传文件
     * @param {string} [path] 上传的路径
     * @param {Blob} [file] 上传的文件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFileApiInterface
     */
    systemFileUploadRaw(requestParameters: SystemFileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 根据指定路径上传文件
     * 上传文件
     */
    systemFileUpload(requestParameters: SystemFileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 根据指定路径获取文件列表
     * @summary 获取文件列表
     * @param {string} [path] 文件路径
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFileApiInterface
     */
    systemFilesRaw(requestParameters: SystemFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemFileListResultApiResponse>>;

    /**
     * 根据指定路径获取文件列表
     * 获取文件列表
     */
    systemFiles(requestParameters: SystemFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemFileListResultApiResponse>;

}

/**
 * 
 */
export class SystemFileApi extends runtime.BaseAPI implements SystemFileApiInterface {

    /**
     * 根据指定路径创建文件夹
     * 创建文件夹
     */
    async systemFileCreateFolderRaw(requestParameters: SystemFileCreateFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/SystemFile/CreateFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定路径创建文件夹
     * 创建文件夹
     */
    async systemFileCreateFolder(requestParameters: SystemFileCreateFolderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.systemFileCreateFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据指定路径删除文件
     * 删除文件
     */
    async systemFileDeleteRaw(requestParameters: SystemFileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/SystemFile`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定路径删除文件
     * 删除文件
     */
    async systemFileDelete(requestParameters: SystemFileDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.systemFileDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据指定的源文件名和目标文件名重命名文件
     * 重命名文件
     */
    async systemFileRenameRaw(requestParameters: SystemFileRenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['sourceName'] != null) {
            queryParameters['sourceName'] = requestParameters['sourceName'];
        }

        if (requestParameters['destName'] != null) {
            queryParameters['destName'] = requestParameters['destName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/SystemFile/Rename`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定的源文件名和目标文件名重命名文件
     * 重命名文件
     */
    async systemFileRename(requestParameters: SystemFileRenameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.systemFileRenameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据指定路径上传文件
     * 上传文件
     */
    async systemFileUploadRaw(requestParameters: SystemFileUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/SystemFile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定路径上传文件
     * 上传文件
     */
    async systemFileUpload(requestParameters: SystemFileUploadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.systemFileUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据指定路径获取文件列表
     * 获取文件列表
     */
    async systemFilesRaw(requestParameters: SystemFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemFileListResultApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/SystemFile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemFileListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据指定路径获取文件列表
     * 获取文件列表
     */
    async systemFiles(requestParameters: SystemFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemFileListResultApiResponse> {
        const response = await this.systemFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
