/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  UserSetting,
  UserSettingApiResponse,
  UserSettingListApiResponse,
  UserSettingPostResultApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    UserSettingFromJSON,
    UserSettingToJSON,
    UserSettingApiResponseFromJSON,
    UserSettingApiResponseToJSON,
    UserSettingListApiResponseFromJSON,
    UserSettingListApiResponseToJSON,
    UserSettingPostResultApiResponseFromJSON,
    UserSettingPostResultApiResponseToJSON,
} from '../models/index';

export interface UserSettingRequest {
    id: number;
    appKey: string;
}

export interface UserSettingDeleteRequest {
    id: number;
    appKey: string;
}

export interface UserSettingPostRequest {
    appKey: string;
    userSetting?: UserSetting;
}

export interface UserSettingPutRequest {
    id: number;
    appKey: string;
    userSetting?: UserSetting;
}

export interface UserSettingsRequest {
    appKey: string;
    userId?: number;
    code?: string;
    tag?: string;
}

/**
 * UserSettingApi - interface
 * 
 * @export
 * @interface UserSettingApiInterface
 */
export interface UserSettingApiInterface {
    /**
     * 根据配置项ID获取用户配置项详情
     * @summary 获取用户配置项详情
     * @param {number} id 配置项ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingApiInterface
     */
    userSettingRaw(requestParameters: UserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingApiResponse>>;

    /**
     * 根据配置项ID获取用户配置项详情
     * 获取用户配置项详情
     */
    userSetting(requestParameters: UserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingApiResponse>;

    /**
     * 根据配置项ID删除用户配置项
     * @summary 删除用户配置项
     * @param {number} id 配置项ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingApiInterface
     */
    userSettingDeleteRaw(requestParameters: UserSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据配置项ID删除用户配置项
     * 删除用户配置项
     */
    userSettingDelete(requestParameters: UserSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的用户配置项
     * @summary 添加用户配置项
     * @param {string} appKey 
     * @param {UserSetting} [userSetting] 配置项内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingApiInterface
     */
    userSettingPostRaw(requestParameters: UserSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingPostResultApiResponse>>;

    /**
     * 添加新的用户配置项
     * 添加用户配置项
     */
    userSettingPost(requestParameters: UserSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingPostResultApiResponse>;

    /**
     * 根据配置项ID更新用户配置项内容
     * @summary 更新用户配置项
     * @param {number} id 配置项ID
     * @param {string} appKey 
     * @param {UserSetting} [userSetting] 配置项内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingApiInterface
     */
    userSettingPutRaw(requestParameters: UserSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据配置项ID更新用户配置项内容
     * 更新用户配置项
     */
    userSettingPut(requestParameters: UserSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据用户ID、配置项代码和标签获取用户配置列表
     * @summary 获取用户配置列表
     * @param {string} appKey 
     * @param {number} [userId] 用户ID
     * @param {string} [code] 配置项代码
     * @param {string} [tag] 配置项标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingApiInterface
     */
    userSettingsRaw(requestParameters: UserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingListApiResponse>>;

    /**
     * 根据用户ID、配置项代码和标签获取用户配置列表
     * 获取用户配置列表
     */
    userSettings(requestParameters: UserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingListApiResponse>;

}

/**
 * 
 */
export class UserSettingApi extends runtime.BaseAPI implements UserSettingApiInterface {

    /**
     * 根据配置项ID获取用户配置项详情
     * 获取用户配置项详情
     */
    async userSettingRaw(requestParameters: UserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userSetting().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserSetting/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置项ID获取用户配置项详情
     * 获取用户配置项详情
     */
    async userSetting(requestParameters: UserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingApiResponse> {
        const response = await this.userSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置项ID删除用户配置项
     * 删除用户配置项
     */
    async userSettingDeleteRaw(requestParameters: UserSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userSettingDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSettingDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserSetting/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置项ID删除用户配置项
     * 删除用户配置项
     */
    async userSettingDelete(requestParameters: UserSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userSettingDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的用户配置项
     * 添加用户配置项
     */
    async userSettingPostRaw(requestParameters: UserSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingPostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSettingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserSetting/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSettingToJSON(requestParameters['userSetting']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的用户配置项
     * 添加用户配置项
     */
    async userSettingPost(requestParameters: UserSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingPostResultApiResponse> {
        const response = await this.userSettingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置项ID更新用户配置项内容
     * 更新用户配置项
     */
    async userSettingPutRaw(requestParameters: UserSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userSettingPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSettingPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserSetting/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserSettingToJSON(requestParameters['userSetting']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置项ID更新用户配置项内容
     * 更新用户配置项
     */
    async userSettingPut(requestParameters: UserSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userSettingPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID、配置项代码和标签获取用户配置列表
     * 获取用户配置列表
     */
    async userSettingsRaw(requestParameters: UserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSettingListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userSettings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserSetting/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID、配置项代码和标签获取用户配置列表
     * 获取用户配置列表
     */
    async userSettings(requestParameters: UserSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSettingListApiResponse> {
        const response = await this.userSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
