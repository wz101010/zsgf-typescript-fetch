/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  ListResponseItemListApiResponse,
  Team,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    ListResponseItemListApiResponseFromJSON,
    ListResponseItemListApiResponseToJSON,
    TeamFromJSON,
    TeamToJSON,
} from '../models/index';

export interface TeamDeleteRequest {
    id: number;
}

export interface TeamPostRequest {
    team?: Team;
}

export interface TeamPutRequest {
    id: number;
    team?: Team;
}

export interface TeamsRequest {
    channelCode?: string;
    channelAppId?: string;
}

/**
 * TeamApi - interface
 * 
 * @export
 * @interface TeamApiInterface
 */
export interface TeamApiInterface {
    /**
     * 根据团队ID删除团队
     * @summary 删除团队
     * @param {number} id 团队ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamDeleteRaw(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据团队ID删除团队
     * 删除团队
     */
    teamDelete(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 创建一个新的团队
     * @summary 创建团队
     * @param {Team} [team] 团队信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamPostRaw(requestParameters: TeamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 创建一个新的团队
     * 创建团队
     */
    teamPost(requestParameters: TeamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据团队ID更新团队信息
     * @summary 更新团队信息
     * @param {number} id 团队ID
     * @param {Team} [team] 团队信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamPutRaw(requestParameters: TeamPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据团队ID更新团队信息
     * 更新团队信息
     */
    teamPut(requestParameters: TeamPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据渠道代码和渠道应用ID获取团队列表
     * @summary 获取团队列表
     * @param {string} [channelCode] 渠道代码
     * @param {string} [channelAppId] 渠道应用ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApiInterface
     */
    teamsRaw(requestParameters: TeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseItemListApiResponse>>;

    /**
     * 根据渠道代码和渠道应用ID获取团队列表
     * 获取团队列表
     */
    teams(requestParameters: TeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseItemListApiResponse>;

}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI implements TeamApiInterface {

    /**
     * 根据团队ID删除团队
     * 删除团队
     */
    async teamDeleteRaw(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Team/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据团队ID删除团队
     * 删除团队
     */
    async teamDelete(requestParameters: TeamDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.teamDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建一个新的团队
     * 创建团队
     */
    async teamPostRaw(requestParameters: TeamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Team`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters['team']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个新的团队
     * 创建团队
     */
    async teamPost(requestParameters: TeamPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.teamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据团队ID更新团队信息
     * 更新团队信息
     */
    async teamPutRaw(requestParameters: TeamPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling teamPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Team/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters['team']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据团队ID更新团队信息
     * 更新团队信息
     */
    async teamPut(requestParameters: TeamPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.teamPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据渠道代码和渠道应用ID获取团队列表
     * 获取团队列表
     */
    async teamsRaw(requestParameters: TeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseItemListApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['channelCode'] != null) {
            queryParameters['channelCode'] = requestParameters['channelCode'];
        }

        if (requestParameters['channelAppId'] != null) {
            queryParameters['channelAppId'] = requestParameters['channelAppId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Team`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseItemListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据渠道代码和渠道应用ID获取团队列表
     * 获取团队列表
     */
    async teams(requestParameters: TeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseItemListApiResponse> {
        const response = await this.teamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
