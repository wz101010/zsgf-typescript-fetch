/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  ServiceGroup,
  ServiceGroupApiResponse,
  ServiceGroupListApiResponse,
  ServiceItem,
  ServiceItemApiResponse,
  ServiceItemListApiResponse,
  ServiceProvider,
  ServiceProviderApiResponse,
  ServiceProviderListApiResponse,
  ServiceSettingGroupPostResultApiResponse,
  ServiceSettingItemPostResultApiResponse,
  ServiceSettingProviderPostResultApiResponse,
  ServiceSettingSettingPostResultApiResponse,
  Settings,
  SettingsApiResponse,
  SettingsListApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    ServiceGroupFromJSON,
    ServiceGroupToJSON,
    ServiceGroupApiResponseFromJSON,
    ServiceGroupApiResponseToJSON,
    ServiceGroupListApiResponseFromJSON,
    ServiceGroupListApiResponseToJSON,
    ServiceItemFromJSON,
    ServiceItemToJSON,
    ServiceItemApiResponseFromJSON,
    ServiceItemApiResponseToJSON,
    ServiceItemListApiResponseFromJSON,
    ServiceItemListApiResponseToJSON,
    ServiceProviderFromJSON,
    ServiceProviderToJSON,
    ServiceProviderApiResponseFromJSON,
    ServiceProviderApiResponseToJSON,
    ServiceProviderListApiResponseFromJSON,
    ServiceProviderListApiResponseToJSON,
    ServiceSettingGroupPostResultApiResponseFromJSON,
    ServiceSettingGroupPostResultApiResponseToJSON,
    ServiceSettingItemPostResultApiResponseFromJSON,
    ServiceSettingItemPostResultApiResponseToJSON,
    ServiceSettingProviderPostResultApiResponseFromJSON,
    ServiceSettingProviderPostResultApiResponseToJSON,
    ServiceSettingSettingPostResultApiResponseFromJSON,
    ServiceSettingSettingPostResultApiResponseToJSON,
    SettingsFromJSON,
    SettingsToJSON,
    SettingsApiResponseFromJSON,
    SettingsApiResponseToJSON,
    SettingsListApiResponseFromJSON,
    SettingsListApiResponseToJSON,
} from '../models/index';

export interface ServiceSettingRequest {
    id: number;
}

export interface ServiceSettingDeleteRequest {
    id: number;
}

export interface ServiceSettingGroupRequest {
    id: number;
}

export interface ServiceSettingGroupDeleteRequest {
    id: number;
}

export interface ServiceSettingGroupPostRequest {
    serviceGroup?: ServiceGroup;
}

export interface ServiceSettingGroupPutRequest {
    id: number;
    serviceGroup?: ServiceGroup;
}

export interface ServiceSettingGroupsRequest {
    providerId?: number;
    showFlag?: boolean;
}

export interface ServiceSettingItemRequest {
    id: number;
}

export interface ServiceSettingItemDeleteRequest {
    id: number;
}

export interface ServiceSettingItemPostRequest {
    serviceItem?: ServiceItem;
}

export interface ServiceSettingItemPutRequest {
    id: number;
    serviceItem?: ServiceItem;
}

export interface ServiceSettingItemsRequest {
    bizCode?: string;
    providerCode?: string;
    groupCode?: string;
    showFlag?: boolean;
}

export interface ServiceSettingPostRequest {
    settings?: Settings;
}

export interface ServiceSettingProviderRequest {
    id: number;
}

export interface ServiceSettingProviderDeleteRequest {
    id: number;
}

export interface ServiceSettingProviderPostRequest {
    serviceProvider?: ServiceProvider;
}

export interface ServiceSettingProviderPutRequest {
    id: number;
    serviceProvider?: ServiceProvider;
}

export interface ServiceSettingProvidersRequest {
    bizCode?: string;
    showFlag?: boolean;
}

export interface ServiceSettingPutRequest {
    id: number;
    settings?: Settings;
}

export interface ServiceSettingsRequest {
    bizCode: string;
    bizId: string;
    providerCode?: string;
    groupCode?: string;
    tag?: string;
    code?: string;
}

/**
 * ServiceSettingApi - interface
 * 
 * @export
 * @interface ServiceSettingApiInterface
 */
export interface ServiceSettingApiInterface {
    /**
     * 根据配置ID获取配置详情
     * @summary 获取配置详情
     * @param {number} id 配置ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingRaw(requestParameters: ServiceSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsApiResponse>>;

    /**
     * 根据配置ID获取配置详情
     * 获取配置详情
     */
    serviceSetting(requestParameters: ServiceSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsApiResponse>;

    /**
     * 根据配置ID删除配置
     * @summary 删除配置
     * @param {number} id 配置ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingDeleteRaw(requestParameters: ServiceSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据配置ID删除配置
     * 删除配置
     */
    serviceSettingDelete(requestParameters: ServiceSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据服务分组ID获取服务分组详情
     * @summary 获取服务分组详情
     * @param {number} id 服务分组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingGroupRaw(requestParameters: ServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupApiResponse>>;

    /**
     * 根据服务分组ID获取服务分组详情
     * 获取服务分组详情
     */
    serviceSettingGroup(requestParameters: ServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupApiResponse>;

    /**
     * 根据服务分组ID删除服务分组
     * @summary 删除服务分组
     * @param {number} id 服务分组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingGroupDeleteRaw(requestParameters: ServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务分组ID删除服务分组
     * 删除服务分组
     */
    serviceSettingGroupDelete(requestParameters: ServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的服务分组
     * @summary 添加服务分组
     * @param {ServiceGroup} [serviceGroup] 服务分组实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingGroupPostRaw(requestParameters: ServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingGroupPostResultApiResponse>>;

    /**
     * 添加新的服务分组
     * 添加服务分组
     */
    serviceSettingGroupPost(requestParameters: ServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingGroupPostResultApiResponse>;

    /**
     * 根据服务分组ID更新服务分组信息
     * @summary 更新服务分组
     * @param {number} id 服务分组ID
     * @param {ServiceGroup} [serviceGroup] 服务分组实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingGroupPutRaw(requestParameters: ServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务分组ID更新服务分组信息
     * 更新服务分组
     */
    serviceSettingGroupPut(requestParameters: ServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * @summary 获取服务分组列表
     * @param {number} [providerId] 服务商ID
     * @param {boolean} [showFlag] 是否显示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingGroupsRaw(requestParameters: ServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupListApiResponse>>;

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * 获取服务分组列表
     */
    serviceSettingGroups(requestParameters: ServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupListApiResponse>;

    /**
     * 根据服务配置ID获取服务配置详情
     * @summary 服务配置详情
     * @param {number} id 服务配置ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingItemRaw(requestParameters: ServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemApiResponse>>;

    /**
     * 根据服务配置ID获取服务配置详情
     * 服务配置详情
     */
    serviceSettingItem(requestParameters: ServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemApiResponse>;

    /**
     * 根据服务配置ID删除服务配置
     * @summary 删除服务配置
     * @param {number} id 服务配置ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingItemDeleteRaw(requestParameters: ServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务配置ID删除服务配置
     * 删除服务配置
     */
    serviceSettingItemDelete(requestParameters: ServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的服务配置
     * @summary 添加服务配置
     * @param {ServiceItem} [serviceItem] 服务配置实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingItemPostRaw(requestParameters: ServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingItemPostResultApiResponse>>;

    /**
     * 添加新的服务配置
     * 添加服务配置
     */
    serviceSettingItemPost(requestParameters: ServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingItemPostResultApiResponse>;

    /**
     * 根据服务配置ID更新服务配置信息
     * @summary 更新服务配置
     * @param {number} id 服务配置ID
     * @param {ServiceItem} [serviceItem] 服务配置实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingItemPutRaw(requestParameters: ServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务配置ID更新服务配置信息
     * 更新服务配置
     */
    serviceSettingItemPut(requestParameters: ServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置列表
     * @summary 服务配置列表
     * @param {string} [bizCode] 业务代码
     * @param {string} [providerCode] 服务商代码
     * @param {string} [groupCode] 分组代码
     * @param {boolean} [showFlag] 是否显示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingItemsRaw(requestParameters: ServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemListApiResponse>>;

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置列表
     * 服务配置列表
     */
    serviceSettingItems(requestParameters: ServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemListApiResponse>;

    /**
     * 添加新的配置
     * @summary 增加配置
     * @param {Settings} [settings] 配置实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingPostRaw(requestParameters: ServiceSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingSettingPostResultApiResponse>>;

    /**
     * 添加新的配置
     * 增加配置
     */
    serviceSettingPost(requestParameters: ServiceSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingSettingPostResultApiResponse>;

    /**
     * 根据服务商ID获取服务商详情
     * @summary 获取服务商详情
     * @param {number} id 服务商ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingProviderRaw(requestParameters: ServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderApiResponse>>;

    /**
     * 根据服务商ID获取服务商详情
     * 获取服务商详情
     */
    serviceSettingProvider(requestParameters: ServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderApiResponse>;

    /**
     * 根据服务商ID删除服务商
     * @summary 删除服务商
     * @param {number} id 服务商ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingProviderDeleteRaw(requestParameters: ServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务商ID删除服务商
     * 删除服务商
     */
    serviceSettingProviderDelete(requestParameters: ServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的服务商
     * @summary 添加服务商
     * @param {ServiceProvider} [serviceProvider] 服务商实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingProviderPostRaw(requestParameters: ServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingProviderPostResultApiResponse>>;

    /**
     * 添加新的服务商
     * 添加服务商
     */
    serviceSettingProviderPost(requestParameters: ServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingProviderPostResultApiResponse>;

    /**
     * 根据服务商ID更新服务商信息
     * @summary 更新服务商
     * @param {number} id 服务商ID
     * @param {ServiceProvider} [serviceProvider] 服务商实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingProviderPutRaw(requestParameters: ServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务商ID更新服务商信息
     * 更新服务商
     */
    serviceSettingProviderPut(requestParameters: ServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据业务代码和显示标志获取服务商列表
     * @summary 获取服务商列表
     * @param {string} [bizCode] 业务代码
     * @param {boolean} [showFlag] 是否显示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingProvidersRaw(requestParameters: ServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderListApiResponse>>;

    /**
     * 根据业务代码和显示标志获取服务商列表
     * 获取服务商列表
     */
    serviceSettingProviders(requestParameters: ServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderListApiResponse>;

    /**
     * 根据配置ID更新配置信息
     * @summary 更新配置
     * @param {number} id 配置ID
     * @param {Settings} [settings] 配置实体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingPutRaw(requestParameters: ServiceSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据配置ID更新配置信息
     * 更新配置
     */
    serviceSettingPut(requestParameters: ServiceSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据业务代码、业务标识、服务商代码、分组代码、标签和配置项代码获取配置列表
     * @summary 获取配置列表
     * @param {string} bizCode 业务代码
     * @param {string} bizId 业务标识
     * @param {string} [providerCode] 服务商代码
     * @param {string} [groupCode] 分组代码
     * @param {string} [tag] 标签
     * @param {string} [code] 配置项代码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceSettingApiInterface
     */
    serviceSettingsRaw(requestParameters: ServiceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsListApiResponse>>;

    /**
     * 根据业务代码、业务标识、服务商代码、分组代码、标签和配置项代码获取配置列表
     * 获取配置列表
     */
    serviceSettings(requestParameters: ServiceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsListApiResponse>;

}

/**
 * 
 */
export class ServiceSettingApi extends runtime.BaseAPI implements ServiceSettingApiInterface {

    /**
     * 根据配置ID获取配置详情
     * 获取配置详情
     */
    async serviceSettingRaw(requestParameters: ServiceSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置ID获取配置详情
     * 获取配置详情
     */
    async serviceSetting(requestParameters: ServiceSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsApiResponse> {
        const response = await this.serviceSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置ID删除配置
     * 删除配置
     */
    async serviceSettingDeleteRaw(requestParameters: ServiceSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置ID删除配置
     * 删除配置
     */
    async serviceSettingDelete(requestParameters: ServiceSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务分组ID获取服务分组详情
     * 获取服务分组详情
     */
    async serviceSettingGroupRaw(requestParameters: ServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务分组ID获取服务分组详情
     * 获取服务分组详情
     */
    async serviceSettingGroup(requestParameters: ServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupApiResponse> {
        const response = await this.serviceSettingGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务分组ID删除服务分组
     * 删除服务分组
     */
    async serviceSettingGroupDeleteRaw(requestParameters: ServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingGroupDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务分组ID删除服务分组
     * 删除服务分组
     */
    async serviceSettingGroupDelete(requestParameters: ServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingGroupDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的服务分组
     * 添加服务分组
     */
    async serviceSettingGroupPostRaw(requestParameters: ServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingGroupPostResultApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceGroupToJSON(requestParameters['serviceGroup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSettingGroupPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的服务分组
     * 添加服务分组
     */
    async serviceSettingGroupPost(requestParameters: ServiceSettingGroupPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingGroupPostResultApiResponse> {
        const response = await this.serviceSettingGroupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务分组ID更新服务分组信息
     * 更新服务分组
     */
    async serviceSettingGroupPutRaw(requestParameters: ServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingGroupPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceGroupToJSON(requestParameters['serviceGroup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务分组ID更新服务分组信息
     * 更新服务分组
     */
    async serviceSettingGroupPut(requestParameters: ServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingGroupPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * 获取服务分组列表
     */
    async serviceSettingGroupsRaw(requestParameters: ServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupListApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['providerId'] != null) {
            queryParameters['providerId'] = requestParameters['providerId'];
        }

        if (requestParameters['showFlag'] != null) {
            queryParameters['showFlag'] = requestParameters['showFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * 获取服务分组列表
     */
    async serviceSettingGroups(requestParameters: ServiceSettingGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupListApiResponse> {
        const response = await this.serviceSettingGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务配置ID获取服务配置详情
     * 服务配置详情
     */
    async serviceSettingItemRaw(requestParameters: ServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceItemApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务配置ID获取服务配置详情
     * 服务配置详情
     */
    async serviceSettingItem(requestParameters: ServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemApiResponse> {
        const response = await this.serviceSettingItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务配置ID删除服务配置
     * 删除服务配置
     */
    async serviceSettingItemDeleteRaw(requestParameters: ServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingItemDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务配置ID删除服务配置
     * 删除服务配置
     */
    async serviceSettingItemDelete(requestParameters: ServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingItemDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的服务配置
     * 添加服务配置
     */
    async serviceSettingItemPostRaw(requestParameters: ServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingItemPostResultApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceItemToJSON(requestParameters['serviceItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSettingItemPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的服务配置
     * 添加服务配置
     */
    async serviceSettingItemPost(requestParameters: ServiceSettingItemPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingItemPostResultApiResponse> {
        const response = await this.serviceSettingItemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务配置ID更新服务配置信息
     * 更新服务配置
     */
    async serviceSettingItemPutRaw(requestParameters: ServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingItemPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceItemToJSON(requestParameters['serviceItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务配置ID更新服务配置信息
     * 更新服务配置
     */
    async serviceSettingItemPut(requestParameters: ServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingItemPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置列表
     * 服务配置列表
     */
    async serviceSettingItemsRaw(requestParameters: ServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemListApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['bizCode'] != null) {
            queryParameters['bizCode'] = requestParameters['bizCode'];
        }

        if (requestParameters['providerCode'] != null) {
            queryParameters['providerCode'] = requestParameters['providerCode'];
        }

        if (requestParameters['groupCode'] != null) {
            queryParameters['groupCode'] = requestParameters['groupCode'];
        }

        if (requestParameters['showFlag'] != null) {
            queryParameters['showFlag'] = requestParameters['showFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceItemListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置列表
     * 服务配置列表
     */
    async serviceSettingItems(requestParameters: ServiceSettingItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemListApiResponse> {
        const response = await this.serviceSettingItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的配置
     * 增加配置
     */
    async serviceSettingPostRaw(requestParameters: ServiceSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingSettingPostResultApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsToJSON(requestParameters['settings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSettingSettingPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的配置
     * 增加配置
     */
    async serviceSettingPost(requestParameters: ServiceSettingPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingSettingPostResultApiResponse> {
        const response = await this.serviceSettingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID获取服务商详情
     * 获取服务商详情
     */
    async serviceSettingProviderRaw(requestParameters: ServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceProviderApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID获取服务商详情
     * 获取服务商详情
     */
    async serviceSettingProvider(requestParameters: ServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderApiResponse> {
        const response = await this.serviceSettingProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID删除服务商
     * 删除服务商
     */
    async serviceSettingProviderDeleteRaw(requestParameters: ServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingProviderDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID删除服务商
     * 删除服务商
     */
    async serviceSettingProviderDelete(requestParameters: ServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingProviderDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的服务商
     * 添加服务商
     */
    async serviceSettingProviderPostRaw(requestParameters: ServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceSettingProviderPostResultApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Providers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceProviderToJSON(requestParameters['serviceProvider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSettingProviderPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的服务商
     * 添加服务商
     */
    async serviceSettingProviderPost(requestParameters: ServiceSettingProviderPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceSettingProviderPostResultApiResponse> {
        const response = await this.serviceSettingProviderPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID更新服务商信息
     * 更新服务商
     */
    async serviceSettingProviderPutRaw(requestParameters: ServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingProviderPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceProviderToJSON(requestParameters['serviceProvider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID更新服务商信息
     * 更新服务商
     */
    async serviceSettingProviderPut(requestParameters: ServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingProviderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据业务代码和显示标志获取服务商列表
     * 获取服务商列表
     */
    async serviceSettingProvidersRaw(requestParameters: ServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderListApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['bizCode'] != null) {
            queryParameters['bizCode'] = requestParameters['bizCode'];
        }

        if (requestParameters['showFlag'] != null) {
            queryParameters['showFlag'] = requestParameters['showFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/Providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceProviderListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据业务代码和显示标志获取服务商列表
     * 获取服务商列表
     */
    async serviceSettingProviders(requestParameters: ServiceSettingProvidersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderListApiResponse> {
        const response = await this.serviceSettingProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置ID更新配置信息
     * 更新配置
     */
    async serviceSettingPutRaw(requestParameters: ServiceSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceSettingPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsToJSON(requestParameters['settings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置ID更新配置信息
     * 更新配置
     */
    async serviceSettingPut(requestParameters: ServiceSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.serviceSettingPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据业务代码、业务标识、服务商代码、分组代码、标签和配置项代码获取配置列表
     * 获取配置列表
     */
    async serviceSettingsRaw(requestParameters: ServiceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SettingsListApiResponse>> {
        if (requestParameters['bizCode'] == null) {
            throw new runtime.RequiredError(
                'bizCode',
                'Required parameter "bizCode" was null or undefined when calling serviceSettings().'
            );
        }

        if (requestParameters['bizId'] == null) {
            throw new runtime.RequiredError(
                'bizId',
                'Required parameter "bizId" was null or undefined when calling serviceSettings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bizCode'] != null) {
            queryParameters['bizCode'] = requestParameters['bizCode'];
        }

        if (requestParameters['bizId'] != null) {
            queryParameters['bizId'] = requestParameters['bizId'];
        }

        if (requestParameters['providerCode'] != null) {
            queryParameters['providerCode'] = requestParameters['providerCode'];
        }

        if (requestParameters['groupCode'] != null) {
            queryParameters['groupCode'] = requestParameters['groupCode'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ServiceSetting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据业务代码、业务标识、服务商代码、分组代码、标签和配置项代码获取配置列表
     * 获取配置列表
     */
    async serviceSettings(requestParameters: ServiceSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SettingsListApiResponse> {
        const response = await this.serviceSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
