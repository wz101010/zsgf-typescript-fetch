/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  PostResultApiResponse,
  Project,
  ProjectApiResponse,
  ProjectListResultApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    PostResultApiResponseFromJSON,
    PostResultApiResponseToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectApiResponseFromJSON,
    ProjectApiResponseToJSON,
    ProjectListResultApiResponseFromJSON,
    ProjectListResultApiResponseToJSON,
} from '../models/index';

export interface ProjectRequest {
    id: number;
}

export interface ProjectDeleteRequest {
    id: number;
}

export interface ProjectPostRequest {
    project?: Project;
}

export interface ProjectPutRequest {
    id: string;
    project?: Project;
}

export interface ProjectsRequest {
    skip?: number;
    take?: number;
}

/**
 * ProjectApi - interface
 * 
 * @export
 * @interface ProjectApiInterface
 */
export interface ProjectApiInterface {
    /**
     * 根据项目ID获取项目详情
     * @summary 项目详情
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectRaw(requestParameters: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectApiResponse>>;

    /**
     * 根据项目ID获取项目详情
     * 项目详情
     */
    project(requestParameters: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectApiResponse>;

    /**
     * 根据项目ID删除项目
     * @summary 删除项目
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectDeleteRaw(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据项目ID删除项目
     * 删除项目
     */
    projectDelete(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 创建一个新项目
     * @summary 创建项目
     * @param {Project} [project] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectPostRaw(requestParameters: ProjectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostResultApiResponse>>;

    /**
     * 创建一个新项目
     * 创建项目
     */
    projectPost(requestParameters: ProjectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostResultApiResponse>;

    /**
     * 根据项目ID更新项目
     * @summary 更新项目
     * @param {string} id 
     * @param {Project} [project] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectPutRaw(requestParameters: ProjectPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据项目ID更新项目
     * 更新项目
     */
    projectPut(requestParameters: ProjectPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 获取项目列表，支持分页
     * @summary 项目列表
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectsRaw(requestParameters: ProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectListResultApiResponse>>;

    /**
     * 获取项目列表，支持分页
     * 项目列表
     */
    projects(requestParameters: ProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectListResultApiResponse>;

}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI implements ProjectApiInterface {

    /**
     * 根据项目ID获取项目详情
     * 项目详情
     */
    async projectRaw(requestParameters: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling project().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据项目ID获取项目详情
     * 项目详情
     */
    async project(requestParameters: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectApiResponse> {
        const response = await this.projectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据项目ID删除项目
     * 删除项目
     */
    async projectDeleteRaw(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据项目ID删除项目
     * 删除项目
     */
    async projectDelete(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.projectDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建一个新项目
     * 创建项目
     */
    async projectPostRaw(requestParameters: ProjectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostResultApiResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个新项目
     * 创建项目
     */
    async projectPost(requestParameters: ProjectPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostResultApiResponse> {
        const response = await this.projectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据项目ID更新项目
     * 更新项目
     */
    async projectPutRaw(requestParameters: ProjectPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Project/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据项目ID更新项目
     * 更新项目
     */
    async projectPut(requestParameters: ProjectPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.projectPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取项目列表，支持分页
     * 项目列表
     */
    async projectsRaw(requestParameters: ProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectListResultApiResponse>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取项目列表，支持分页
     * 项目列表
     */
    async projects(requestParameters: ProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectListResultApiResponse> {
        const response = await this.projectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
