/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrderRequest,
  CreateOrderResultApiResponse,
  OrderApiResponse,
  OrderListResultApiResponse,
} from '../models/index';
import {
    CreateOrderRequestFromJSON,
    CreateOrderRequestToJSON,
    CreateOrderResultApiResponseFromJSON,
    CreateOrderResultApiResponseToJSON,
    OrderApiResponseFromJSON,
    OrderApiResponseToJSON,
    OrderListResultApiResponseFromJSON,
    OrderListResultApiResponseToJSON,
} from '../models/index';

export interface OrderRequest {
    id: number;
    appKey: string;
}

export interface OrderCreateRequest {
    appKey: string;
    createOrderRequest?: CreateOrderRequest;
}

export interface OrdersRequest {
    appKey: string;
    status?: string;
    orderNo?: string;
    tradeNo?: string;
    userId?: number;
    pctType?: string;
    pctId?: string;
    pctName?: string;
    skip?: number;
    take?: number;
}

/**
 * OrderApi - interface
 * 
 * @export
 * @interface OrderApiInterface
 */
export interface OrderApiInterface {
    /**
     * 根据订单ID获取订单详情
     * @summary 获取订单详情
     * @param {number} id 订单ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderRaw(requestParameters: OrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderApiResponse>>;

    /**
     * 根据订单ID获取订单详情
     * 获取订单详情
     */
    order(requestParameters: OrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderApiResponse>;

    /**
     * 根据请求参数创建订单
     * @summary 创建订单
     * @param {string} appKey 
     * @param {CreateOrderRequest} [createOrderRequest] 订单创建请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderCreateRaw(requestParameters: OrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrderResultApiResponse>>;

    /**
     * 根据请求参数创建订单
     * 创建订单
     */
    orderCreate(requestParameters: OrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrderResultApiResponse>;

    /**
     * 根据查询条件获取订单列表
     * @summary 获取订单列表
     * @param {string} appKey 
     * @param {string} [status] 订单状态
     * @param {string} [orderNo] 系统订单号
     * @param {string} [tradeNo] 支付平台单号
     * @param {number} [userId] 用户ID
     * @param {string} [pctType] 商品类型
     * @param {string} [pctId] 商品ID
     * @param {string} [pctName] 商品名称
     * @param {number} [skip] 跳过的条数
     * @param {number} [take] 拉取的条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    ordersRaw(requestParameters: OrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListResultApiResponse>>;

    /**
     * 根据查询条件获取订单列表
     * 获取订单列表
     */
    orders(requestParameters: OrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListResultApiResponse>;

}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI implements OrderApiInterface {

    /**
     * 根据订单ID获取订单详情
     * 获取订单详情
     */
    async orderRaw(requestParameters: OrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling order().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling order().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据订单ID获取订单详情
     * 获取订单详情
     */
    async order(requestParameters: OrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderApiResponse> {
        const response = await this.orderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据请求参数创建订单
     * 创建订单
     */
    async orderCreateRaw(requestParameters: OrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrderResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling orderCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order/{appKey}/Create`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderRequestToJSON(requestParameters['createOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrderResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据请求参数创建订单
     * 创建订单
     */
    async orderCreate(requestParameters: OrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrderResultApiResponse> {
        const response = await this.orderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据查询条件获取订单列表
     * 获取订单列表
     */
    async ordersRaw(requestParameters: OrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderListResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling orders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['orderNo'] != null) {
            queryParameters['orderNo'] = requestParameters['orderNo'];
        }

        if (requestParameters['tradeNo'] != null) {
            queryParameters['tradeNo'] = requestParameters['tradeNo'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['pctType'] != null) {
            queryParameters['pctType'] = requestParameters['pctType'];
        }

        if (requestParameters['pctId'] != null) {
            queryParameters['pctId'] = requestParameters['pctId'];
        }

        if (requestParameters['pctName'] != null) {
            queryParameters['pctName'] = requestParameters['pctName'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderListResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据查询条件获取订单列表
     * 获取订单列表
     */
    async orders(requestParameters: OrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderListResultApiResponse> {
        const response = await this.ordersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
