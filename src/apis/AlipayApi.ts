/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlipayCreateOrderPagePayRequest,
  AlipayCreateOrderRequest,
  AlipayCreateOrderWapPayRequest,
  AlipayTradeQueryResponseApiResponse,
  AlipayTradeRefundResponseApiResponse,
  BooleanApiResponse,
  ReturnPageNotifyRequest,
  StringApiResponse,
} from '../models/index';
import {
    AlipayCreateOrderPagePayRequestFromJSON,
    AlipayCreateOrderPagePayRequestToJSON,
    AlipayCreateOrderRequestFromJSON,
    AlipayCreateOrderRequestToJSON,
    AlipayCreateOrderWapPayRequestFromJSON,
    AlipayCreateOrderWapPayRequestToJSON,
    AlipayTradeQueryResponseApiResponseFromJSON,
    AlipayTradeQueryResponseApiResponseToJSON,
    AlipayTradeRefundResponseApiResponseFromJSON,
    AlipayTradeRefundResponseApiResponseToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    ReturnPageNotifyRequestFromJSON,
    ReturnPageNotifyRequestToJSON,
    StringApiResponseFromJSON,
    StringApiResponseToJSON,
} from '../models/index';

export interface AlipayCreateOrderOperationRequest {
    appKey: string;
    alipayCreateOrderRequest?: AlipayCreateOrderRequest;
}

export interface AlipayCreateOrderPagePayOperationRequest {
    appKey: string;
    alipayCreateOrderPagePayRequest?: AlipayCreateOrderPagePayRequest;
}

export interface AlipayCreateOrderWapPayOperationRequest {
    appKey: string;
    alipayCreateOrderWapPayRequest?: AlipayCreateOrderWapPayRequest;
}

export interface AlipayOrderDetailRequest {
    appKey: string;
    orderNo?: string;
}

export interface AlipayOrderRefundRequest {
    appKey: string;
    amount?: string;
    orderNo?: string;
}

export interface AlipayReturnPageNotifyRequest {
    appKey: string;
    returnPageNotifyRequest?: ReturnPageNotifyRequest;
}

/**
 * AlipayApi - interface
 * 
 * @export
 * @interface AlipayApiInterface
 */
export interface AlipayApiInterface {
    /**
     * 创建一个当面付订单，并返回支付二维码。
     * @summary 创建订单 - 当面付
     * @param {string} appKey 
     * @param {AlipayCreateOrderRequest} [alipayCreateOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlipayApiInterface
     */
    alipayCreateOrderRaw(requestParameters: AlipayCreateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 创建一个当面付订单，并返回支付二维码。
     * 创建订单 - 当面付
     */
    alipayCreateOrder(requestParameters: AlipayCreateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 创建一个PC支付订单，并返回支付页面。
     * @summary 创建订单 - PC支付
     * @param {string} appKey 
     * @param {AlipayCreateOrderPagePayRequest} [alipayCreateOrderPagePayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlipayApiInterface
     */
    alipayCreateOrderPagePayRaw(requestParameters: AlipayCreateOrderPagePayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 创建一个PC支付订单，并返回支付页面。
     * 创建订单 - PC支付
     */
    alipayCreateOrderPagePay(requestParameters: AlipayCreateOrderPagePayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 创建一个WAP支付订单，并返回支付页面。
     * @summary 创建订单 - WAP支付
     * @param {string} appKey 
     * @param {AlipayCreateOrderWapPayRequest} [alipayCreateOrderWapPayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlipayApiInterface
     */
    alipayCreateOrderWapPayRaw(requestParameters: AlipayCreateOrderWapPayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>>;

    /**
     * 创建一个WAP支付订单，并返回支付页面。
     * 创建订单 - WAP支付
     */
    alipayCreateOrderWapPay(requestParameters: AlipayCreateOrderWapPayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse>;

    /**
     * 查询订单详情，包括订单状态和支付信息。
     * @summary 订单详情
     * @param {string} appKey 
     * @param {string} [orderNo] 订单号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlipayApiInterface
     */
    alipayOrderDetailRaw(requestParameters: AlipayOrderDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlipayTradeQueryResponseApiResponse>>;

    /**
     * 查询订单详情，包括订单状态和支付信息。
     * 订单详情
     */
    alipayOrderDetail(requestParameters: AlipayOrderDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlipayTradeQueryResponseApiResponse>;

    /**
     * 对指定订单进行退款操作。
     * @summary 订单退款
     * @param {string} appKey 
     * @param {string} [amount] 退款金额
     * @param {string} [orderNo] 订单号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlipayApiInterface
     */
    alipayOrderRefundRaw(requestParameters: AlipayOrderRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlipayTradeRefundResponseApiResponse>>;

    /**
     * 对指定订单进行退款操作。
     * 订单退款
     */
    alipayOrderRefund(requestParameters: AlipayOrderRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlipayTradeRefundResponseApiResponse>;

    /**
     * 处理支付宝支付成功的同步通知。
     * @summary 支付成功同步通知
     * @param {string} appKey 
     * @param {ReturnPageNotifyRequest} [returnPageNotifyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlipayApiInterface
     */
    alipayReturnPageNotifyRaw(requestParameters: AlipayReturnPageNotifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 处理支付宝支付成功的同步通知。
     * 支付成功同步通知
     */
    alipayReturnPageNotify(requestParameters: AlipayReturnPageNotifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

}

/**
 * 
 */
export class AlipayApi extends runtime.BaseAPI implements AlipayApiInterface {

    /**
     * 创建一个当面付订单，并返回支付二维码。
     * 创建订单 - 当面付
     */
    async alipayCreateOrderRaw(requestParameters: AlipayCreateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling alipayCreateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Alipay/{appKey}/CreateOrder`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlipayCreateOrderRequestToJSON(requestParameters['alipayCreateOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个当面付订单，并返回支付二维码。
     * 创建订单 - 当面付
     */
    async alipayCreateOrder(requestParameters: AlipayCreateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.alipayCreateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建一个PC支付订单，并返回支付页面。
     * 创建订单 - PC支付
     */
    async alipayCreateOrderPagePayRaw(requestParameters: AlipayCreateOrderPagePayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling alipayCreateOrderPagePay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Alipay/{appKey}/CreateOrderPagePay`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlipayCreateOrderPagePayRequestToJSON(requestParameters['alipayCreateOrderPagePayRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个PC支付订单，并返回支付页面。
     * 创建订单 - PC支付
     */
    async alipayCreateOrderPagePay(requestParameters: AlipayCreateOrderPagePayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.alipayCreateOrderPagePayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建一个WAP支付订单，并返回支付页面。
     * 创建订单 - WAP支付
     */
    async alipayCreateOrderWapPayRaw(requestParameters: AlipayCreateOrderWapPayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling alipayCreateOrderWapPay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Alipay/{appKey}/CreateOrderWapPay`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlipayCreateOrderWapPayRequestToJSON(requestParameters['alipayCreateOrderWapPayRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个WAP支付订单，并返回支付页面。
     * 创建订单 - WAP支付
     */
    async alipayCreateOrderWapPay(requestParameters: AlipayCreateOrderWapPayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringApiResponse> {
        const response = await this.alipayCreateOrderWapPayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询订单详情，包括订单状态和支付信息。
     * 订单详情
     */
    async alipayOrderDetailRaw(requestParameters: AlipayOrderDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlipayTradeQueryResponseApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling alipayOrderDetail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orderNo'] != null) {
            queryParameters['orderNo'] = requestParameters['orderNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Alipay/{appKey}/OrderDetail`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlipayTradeQueryResponseApiResponseFromJSON(jsonValue));
    }

    /**
     * 查询订单详情，包括订单状态和支付信息。
     * 订单详情
     */
    async alipayOrderDetail(requestParameters: AlipayOrderDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlipayTradeQueryResponseApiResponse> {
        const response = await this.alipayOrderDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 对指定订单进行退款操作。
     * 订单退款
     */
    async alipayOrderRefundRaw(requestParameters: AlipayOrderRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlipayTradeRefundResponseApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling alipayOrderRefund().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['orderNo'] != null) {
            queryParameters['orderNo'] = requestParameters['orderNo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Alipay/{appKey}/OrderRefund`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlipayTradeRefundResponseApiResponseFromJSON(jsonValue));
    }

    /**
     * 对指定订单进行退款操作。
     * 订单退款
     */
    async alipayOrderRefund(requestParameters: AlipayOrderRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlipayTradeRefundResponseApiResponse> {
        const response = await this.alipayOrderRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 处理支付宝支付成功的同步通知。
     * 支付成功同步通知
     */
    async alipayReturnPageNotifyRaw(requestParameters: AlipayReturnPageNotifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling alipayReturnPageNotify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Alipay/{appKey}/ReturnPageNotify`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnPageNotifyRequestToJSON(requestParameters['returnPageNotifyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 处理支付宝支付成功的同步通知。
     * 支付成功同步通知
     */
    async alipayReturnPageNotify(requestParameters: AlipayReturnPageNotifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.alipayReturnPageNotifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
