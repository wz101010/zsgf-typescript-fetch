/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  CurrencyConsumeRequest,
  ExchangeCurrencyRequest,
  RechargePointRequest,
  UserCurrencyCurrencyTransResultApiResponse,
  UserCurrencyListApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    CurrencyConsumeRequestFromJSON,
    CurrencyConsumeRequestToJSON,
    ExchangeCurrencyRequestFromJSON,
    ExchangeCurrencyRequestToJSON,
    RechargePointRequestFromJSON,
    RechargePointRequestToJSON,
    UserCurrencyCurrencyTransResultApiResponseFromJSON,
    UserCurrencyCurrencyTransResultApiResponseToJSON,
    UserCurrencyListApiResponseFromJSON,
    UserCurrencyListApiResponseToJSON,
} from '../models/index';

export interface UserCurrenciesRequest {
    id: number;
    appKey: string;
}

export interface UserCurrencyConsumeRequest {
    nonce: string;
    timestamp: number;
    signature: string;
    appKey: string;
    currencyConsumeRequest?: CurrencyConsumeRequest;
}

export interface UserCurrencyExchangeRequest {
    nonce: string;
    timestamp: number;
    signature: string;
    appKey: string;
    exchangeCurrencyRequest?: ExchangeCurrencyRequest;
}

export interface UserCurrencyRechargeRequest {
    nonce: string;
    timestamp: number;
    signature: string;
    appKey: string;
    rechargePointRequest?: RechargePointRequest;
}

export interface UserCurrencyTransactionsRequest {
    appKey: string;
    transType?: string;
    curCode?: string;
    startTime?: Date;
    endTime?: Date;
    skip?: number;
    take?: number;
}

/**
 * UserCurrencyApi - interface
 * 
 * @export
 * @interface UserCurrencyApiInterface
 */
export interface UserCurrencyApiInterface {
    /**
     * 根据用户ID获取用户的资产列表
     * @summary 获取用户资产
     * @param {number} id 用户ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCurrencyApiInterface
     */
    userCurrenciesRaw(requestParameters: UserCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCurrencyListApiResponse>>;

    /**
     * 根据用户ID获取用户的资产列表
     * 获取用户资产
     */
    userCurrencies(requestParameters: UserCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCurrencyListApiResponse>;

    /**
     * 根据提供的参数进行虚拟币消费
     * @summary 消费虚拟币
     * @param {string} nonce 随机数
     * @param {number} timestamp 时间戳（允许与服务器时间误差在1分钟内）
     * @param {string} signature 签名
     * @param {string} appKey 
     * @param {CurrencyConsumeRequest} [currencyConsumeRequest] 消费请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCurrencyApiInterface
     */
    userCurrencyConsumeRaw(requestParameters: UserCurrencyConsumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据提供的参数进行虚拟币消费
     * 消费虚拟币
     */
    userCurrencyConsume(requestParameters: UserCurrencyConsumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据提供的参数进行虚拟币兑换
     * @summary 兑换虚拟币
     * @param {string} nonce 随机数
     * @param {number} timestamp 时间戳（允许与服务器时间误差在1分钟内）
     * @param {string} signature 签名
     * @param {string} appKey 
     * @param {ExchangeCurrencyRequest} [exchangeCurrencyRequest] 兑换请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCurrencyApiInterface
     */
    userCurrencyExchangeRaw(requestParameters: UserCurrencyExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据提供的参数进行虚拟币兑换
     * 兑换虚拟币
     */
    userCurrencyExchange(requestParameters: UserCurrencyExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据提供的参数进行虚拟币充值
     * @summary 充值虚拟币
     * @param {string} nonce 随机数
     * @param {number} timestamp 时间戳（允许与服务器时间误差在1分钟内）
     * @param {string} signature 签名
     * @param {string} appKey 
     * @param {RechargePointRequest} [rechargePointRequest] 充值请求参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCurrencyApiInterface
     */
    userCurrencyRechargeRaw(requestParameters: UserCurrencyRechargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据提供的参数进行虚拟币充值
     * 充值虚拟币
     */
    userCurrencyRecharge(requestParameters: UserCurrencyRechargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据提供的参数获取虚拟币交易记录
     * @summary 虚拟币交易记录
     * @param {string} appKey 
     * @param {string} [transType] 交易类型
     * @param {string} [curCode] 货币代码
     * @param {Date} [startTime] 开始时间
     * @param {Date} [endTime] 结束时间
     * @param {number} [skip] 跳过的条数
     * @param {number} [take] 拉取的条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCurrencyApiInterface
     */
    userCurrencyTransactionsRaw(requestParameters: UserCurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCurrencyCurrencyTransResultApiResponse>>;

    /**
     * 根据提供的参数获取虚拟币交易记录
     * 虚拟币交易记录
     */
    userCurrencyTransactions(requestParameters: UserCurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCurrencyCurrencyTransResultApiResponse>;

}

/**
 * 
 */
export class UserCurrencyApi extends runtime.BaseAPI implements UserCurrencyApiInterface {

    /**
     * 根据用户ID获取用户的资产列表
     * 获取用户资产
     */
    async userCurrenciesRaw(requestParameters: UserCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCurrencyListApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userCurrencies().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userCurrencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserCurrency/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCurrencyListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID获取用户的资产列表
     * 获取用户资产
     */
    async userCurrencies(requestParameters: UserCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCurrencyListApiResponse> {
        const response = await this.userCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据提供的参数进行虚拟币消费
     * 消费虚拟币
     */
    async userCurrencyConsumeRaw(requestParameters: UserCurrencyConsumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['nonce'] == null) {
            throw new runtime.RequiredError(
                'nonce',
                'Required parameter "nonce" was null or undefined when calling userCurrencyConsume().'
            );
        }

        if (requestParameters['timestamp'] == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling userCurrencyConsume().'
            );
        }

        if (requestParameters['signature'] == null) {
            throw new runtime.RequiredError(
                'signature',
                'Required parameter "signature" was null or undefined when calling userCurrencyConsume().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userCurrencyConsume().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserCurrency/{appKey}/CurrencyConsume`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyConsumeRequestToJSON(requestParameters['currencyConsumeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据提供的参数进行虚拟币消费
     * 消费虚拟币
     */
    async userCurrencyConsume(requestParameters: UserCurrencyConsumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userCurrencyConsumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据提供的参数进行虚拟币兑换
     * 兑换虚拟币
     */
    async userCurrencyExchangeRaw(requestParameters: UserCurrencyExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['nonce'] == null) {
            throw new runtime.RequiredError(
                'nonce',
                'Required parameter "nonce" was null or undefined when calling userCurrencyExchange().'
            );
        }

        if (requestParameters['timestamp'] == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling userCurrencyExchange().'
            );
        }

        if (requestParameters['signature'] == null) {
            throw new runtime.RequiredError(
                'signature',
                'Required parameter "signature" was null or undefined when calling userCurrencyExchange().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userCurrencyExchange().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserCurrency/{appKey}/CurrencyExchange`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeCurrencyRequestToJSON(requestParameters['exchangeCurrencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据提供的参数进行虚拟币兑换
     * 兑换虚拟币
     */
    async userCurrencyExchange(requestParameters: UserCurrencyExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userCurrencyExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据提供的参数进行虚拟币充值
     * 充值虚拟币
     */
    async userCurrencyRechargeRaw(requestParameters: UserCurrencyRechargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['nonce'] == null) {
            throw new runtime.RequiredError(
                'nonce',
                'Required parameter "nonce" was null or undefined when calling userCurrencyRecharge().'
            );
        }

        if (requestParameters['timestamp'] == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling userCurrencyRecharge().'
            );
        }

        if (requestParameters['signature'] == null) {
            throw new runtime.RequiredError(
                'signature',
                'Required parameter "signature" was null or undefined when calling userCurrencyRecharge().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userCurrencyRecharge().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['signature'] != null) {
            queryParameters['signature'] = requestParameters['signature'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserCurrency/{appKey}/CurrencyRecharge`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RechargePointRequestToJSON(requestParameters['rechargePointRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据提供的参数进行虚拟币充值
     * 充值虚拟币
     */
    async userCurrencyRecharge(requestParameters: UserCurrencyRechargeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.userCurrencyRechargeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据提供的参数获取虚拟币交易记录
     * 虚拟币交易记录
     */
    async userCurrencyTransactionsRaw(requestParameters: UserCurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCurrencyCurrencyTransResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling userCurrencyTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['transType'] != null) {
            queryParameters['transType'] = requestParameters['transType'];
        }

        if (requestParameters['curCode'] != null) {
            queryParameters['curCode'] = requestParameters['curCode'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/UserCurrency/{appKey}/CurrencyTransactions`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCurrencyCurrencyTransResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据提供的参数获取虚拟币交易记录
     * 虚拟币交易记录
     */
    async userCurrencyTransactions(requestParameters: UserCurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCurrencyCurrencyTransResultApiResponse> {
        const response = await this.userCurrencyTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
