/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppSetting,
  AppSettingApiResponse,
  AppSettingGroupPostResultApiResponse,
  AppSettingItemPostResultApiResponse,
  AppSettingListApiResponse,
  AppSettingProviderPostResultApiResponse,
  AppSettingSettingPostResultApiResponse,
  BooleanApiResponse,
  ServiceGroup,
  ServiceGroupApiResponse,
  ServiceGroupListApiResponse,
  ServiceItem,
  ServiceItemApiResponse,
  ServiceItemListApiResponse,
  ServiceProvider,
  ServiceProviderApiResponse,
  ServiceProviderListApiResponse,
} from '../models/index';
import {
    AppSettingFromJSON,
    AppSettingToJSON,
    AppSettingApiResponseFromJSON,
    AppSettingApiResponseToJSON,
    AppSettingGroupPostResultApiResponseFromJSON,
    AppSettingGroupPostResultApiResponseToJSON,
    AppSettingItemPostResultApiResponseFromJSON,
    AppSettingItemPostResultApiResponseToJSON,
    AppSettingListApiResponseFromJSON,
    AppSettingListApiResponseToJSON,
    AppSettingProviderPostResultApiResponseFromJSON,
    AppSettingProviderPostResultApiResponseToJSON,
    AppSettingSettingPostResultApiResponseFromJSON,
    AppSettingSettingPostResultApiResponseToJSON,
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    ServiceGroupFromJSON,
    ServiceGroupToJSON,
    ServiceGroupApiResponseFromJSON,
    ServiceGroupApiResponseToJSON,
    ServiceGroupListApiResponseFromJSON,
    ServiceGroupListApiResponseToJSON,
    ServiceItemFromJSON,
    ServiceItemToJSON,
    ServiceItemApiResponseFromJSON,
    ServiceItemApiResponseToJSON,
    ServiceItemListApiResponseFromJSON,
    ServiceItemListApiResponseToJSON,
    ServiceProviderFromJSON,
    ServiceProviderToJSON,
    ServiceProviderApiResponseFromJSON,
    ServiceProviderApiResponseToJSON,
    ServiceProviderListApiResponseFromJSON,
    ServiceProviderListApiResponseToJSON,
} from '../models/index';

export interface AppServiceSettingGroupRequest {
    id: number;
    appKey: string;
}

export interface AppServiceSettingGroupDeleteRequest {
    id: number;
    appKey: string;
}

export interface AppServiceSettingGroupPostRequest {
    appKey: string;
    serviceGroup?: ServiceGroup;
}

export interface AppServiceSettingGroupPutRequest {
    id: number;
    appKey: string;
    serviceGroup?: ServiceGroup;
}

export interface AppServiceSettingGroupsRequest {
    appKey: string;
    providerId?: number;
    showFlag?: boolean;
}

export interface AppServiceSettingItemRequest {
    id: number;
    appKey: string;
}

export interface AppServiceSettingItemDeleteRequest {
    id: number;
    appKey: string;
}

export interface AppServiceSettingItemPostRequest {
    appKey: string;
    serviceItem?: ServiceItem;
}

export interface AppServiceSettingItemPutRequest {
    id: number;
    appKey: string;
    serviceItem?: ServiceItem;
}

export interface AppServiceSettingItemsRequest {
    appKey: string;
    bizCode?: string;
    providerCode?: string;
    groupCode?: string;
    showFlag?: boolean;
}

export interface AppServiceSettingProviderRequest {
    id: number;
    appKey: string;
}

export interface AppServiceSettingProviderDeleteRequest {
    id: number;
    appKey: string;
}

export interface AppServiceSettingProviderPostRequest {
    appKey: string;
    serviceProvider?: ServiceProvider;
}

export interface AppServiceSettingProviderPutRequest {
    id: number;
    appKey: string;
    serviceProvider?: ServiceProvider;
}

export interface AppServiceSettingProvidersRequest {
    appKey: string;
    bizCode?: string;
    showFlag?: boolean;
}

export interface AppSettingRequest {
    id: number;
    appKey: string;
}

export interface AppSettingDeleteRequest {
    id: number;
    appKey: string;
}

export interface AppSettingPostRequest {
    appKey: string;
    appSetting?: AppSetting;
}

export interface AppSettingPutRequest {
    id: number;
    appKey: string;
    appSetting?: AppSetting;
}

export interface AppSettingsRequest {
    appKey: string;
    providerCode?: string;
    groupCode?: string;
    tag?: string;
    code?: string;
}

/**
 * AppSettingApi - interface
 * 
 * @export
 * @interface AppSettingApiInterface
 */
export interface AppSettingApiInterface {
    /**
     * 根据服务分组ID获取服务分组详情
     * @summary 获取服务分组详情
     * @param {number} id 服务分组ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingGroupRaw(requestParameters: AppServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupApiResponse>>;

    /**
     * 根据服务分组ID获取服务分组详情
     * 获取服务分组详情
     */
    appServiceSettingGroup(requestParameters: AppServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupApiResponse>;

    /**
     * 根据服务分组ID删除服务分组
     * @summary 删除服务分组
     * @param {number} id 服务分组ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingGroupDeleteRaw(requestParameters: AppServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务分组ID删除服务分组
     * 删除服务分组
     */
    appServiceSettingGroupDelete(requestParameters: AppServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的服务分组信息
     * @summary 添加服务分组
     * @param {string} appKey 
     * @param {ServiceGroup} [serviceGroup] 服务分组信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingGroupPostRaw(requestParameters: AppServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingGroupPostResultApiResponse>>;

    /**
     * 添加新的服务分组信息
     * 添加服务分组
     */
    appServiceSettingGroupPost(requestParameters: AppServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingGroupPostResultApiResponse>;

    /**
     * 根据服务分组ID更新服务分组信息
     * @summary 更新服务分组
     * @param {number} id 服务分组ID
     * @param {string} appKey 
     * @param {ServiceGroup} [serviceGroup] 服务分组信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingGroupPutRaw(requestParameters: AppServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务分组ID更新服务分组信息
     * 更新服务分组
     */
    appServiceSettingGroupPut(requestParameters: AppServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * @summary 获取服务分组列表
     * @param {string} appKey 
     * @param {number} [providerId] 服务商ID
     * @param {boolean} [showFlag] 是否显示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingGroupsRaw(requestParameters: AppServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupListApiResponse>>;

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * 获取服务分组列表
     */
    appServiceSettingGroups(requestParameters: AppServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupListApiResponse>;

    /**
     * 根据服务配置项ID获取服务配置项详情
     * @summary 服务配置项详情
     * @param {number} id 服务配置项ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingItemRaw(requestParameters: AppServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemApiResponse>>;

    /**
     * 根据服务配置项ID获取服务配置项详情
     * 服务配置项详情
     */
    appServiceSettingItem(requestParameters: AppServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemApiResponse>;

    /**
     * 根据服务配置项ID删除服务配置项
     * @summary 删除服务配置项
     * @param {number} id 服务配置项ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingItemDeleteRaw(requestParameters: AppServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务配置项ID删除服务配置项
     * 删除服务配置项
     */
    appServiceSettingItemDelete(requestParameters: AppServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的服务配置项信息
     * @summary 添加服务配置项
     * @param {string} appKey 
     * @param {ServiceItem} [serviceItem] 服务配置项信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingItemPostRaw(requestParameters: AppServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingItemPostResultApiResponse>>;

    /**
     * 添加新的服务配置项信息
     * 添加服务配置项
     */
    appServiceSettingItemPost(requestParameters: AppServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingItemPostResultApiResponse>;

    /**
     * 根据服务配置项ID更新服务配置项信息
     * @summary 更新服务配置项
     * @param {number} id 服务配置项ID
     * @param {string} appKey 
     * @param {ServiceItem} [serviceItem] 服务配置项信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingItemPutRaw(requestParameters: AppServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务配置项ID更新服务配置项信息
     * 更新服务配置项
     */
    appServiceSettingItemPut(requestParameters: AppServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置项列表
     * @summary 服务配置项列表
     * @param {string} appKey 
     * @param {string} [bizCode] 业务代码
     * @param {string} [providerCode] 服务商代码
     * @param {string} [groupCode] 分组代码
     * @param {boolean} [showFlag] 是否显示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingItemsRaw(requestParameters: AppServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemListApiResponse>>;

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置项列表
     * 服务配置项列表
     */
    appServiceSettingItems(requestParameters: AppServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemListApiResponse>;

    /**
     * 根据服务商ID获取服务商详情
     * @summary 获取服务商详情
     * @param {number} id 服务商ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingProviderRaw(requestParameters: AppServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderApiResponse>>;

    /**
     * 根据服务商ID获取服务商详情
     * 获取服务商详情
     */
    appServiceSettingProvider(requestParameters: AppServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderApiResponse>;

    /**
     * 根据服务商ID删除服务商
     * @summary 删除服务商
     * @param {number} id 服务商ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingProviderDeleteRaw(requestParameters: AppServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务商ID删除服务商
     * 删除服务商
     */
    appServiceSettingProviderDelete(requestParameters: AppServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的服务商信息
     * @summary 添加服务商
     * @param {string} appKey 
     * @param {ServiceProvider} [serviceProvider] 服务商信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingProviderPostRaw(requestParameters: AppServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingProviderPostResultApiResponse>>;

    /**
     * 添加新的服务商信息
     * 添加服务商
     */
    appServiceSettingProviderPost(requestParameters: AppServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingProviderPostResultApiResponse>;

    /**
     * 根据服务商ID更新服务商信息
     * @summary 更新服务商
     * @param {number} id 服务商ID
     * @param {string} appKey 
     * @param {ServiceProvider} [serviceProvider] 服务商信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingProviderPutRaw(requestParameters: AppServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据服务商ID更新服务商信息
     * 更新服务商
     */
    appServiceSettingProviderPut(requestParameters: AppServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据业务代码和显示标志获取服务商列表
     * @summary 获取服务商列表
     * @param {string} appKey 
     * @param {string} [bizCode] 业务代码
     * @param {boolean} [showFlag] 是否显示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appServiceSettingProvidersRaw(requestParameters: AppServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderListApiResponse>>;

    /**
     * 根据业务代码和显示标志获取服务商列表
     * 获取服务商列表
     */
    appServiceSettingProviders(requestParameters: AppServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderListApiResponse>;

    /**
     * 根据配置ID获取配置详情
     * @summary 配置详情
     * @param {number} id 配置ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appSettingRaw(requestParameters: AppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingApiResponse>>;

    /**
     * 根据配置ID获取配置详情
     * 配置详情
     */
    appSetting(requestParameters: AppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingApiResponse>;

    /**
     * 根据配置ID删除配置
     * @summary 删除配置
     * @param {number} id 配置ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appSettingDeleteRaw(requestParameters: AppSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据配置ID删除配置
     * 删除配置
     */
    appSettingDelete(requestParameters: AppSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 添加新的配置内容
     * @summary 增加配置
     * @param {string} appKey 
     * @param {AppSetting} [appSetting] 配置内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appSettingPostRaw(requestParameters: AppSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingSettingPostResultApiResponse>>;

    /**
     * 添加新的配置内容
     * 增加配置
     */
    appSettingPost(requestParameters: AppSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingSettingPostResultApiResponse>;

    /**
     * 根据配置ID更新配置内容
     * @summary 更新配置
     * @param {number} id 配置ID
     * @param {string} appKey 
     * @param {AppSetting} [appSetting] 配置内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appSettingPutRaw(requestParameters: AppSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据配置ID更新配置内容
     * 更新配置
     */
    appSettingPut(requestParameters: AppSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据服务商代码、分组代码、标签和配置项代码获取配置列表
     * @summary 配置列表
     * @param {string} appKey 
     * @param {string} [providerCode] 服务商代码
     * @param {string} [groupCode] 分组代码
     * @param {string} [tag] 标签
     * @param {string} [code] 配置项代码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSettingApiInterface
     */
    appSettingsRaw(requestParameters: AppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingListApiResponse>>;

    /**
     * 根据服务商代码、分组代码、标签和配置项代码获取配置列表
     * 配置列表
     */
    appSettings(requestParameters: AppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingListApiResponse>;

}

/**
 * 
 */
export class AppSettingApi extends runtime.BaseAPI implements AppSettingApiInterface {

    /**
     * 根据服务分组ID获取服务分组详情
     * 获取服务分组详情
     */
    async appServiceSettingGroupRaw(requestParameters: AppServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingGroup().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务分组ID获取服务分组详情
     * 获取服务分组详情
     */
    async appServiceSettingGroup(requestParameters: AppServiceSettingGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupApiResponse> {
        const response = await this.appServiceSettingGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务分组ID删除服务分组
     * 删除服务分组
     */
    async appServiceSettingGroupDeleteRaw(requestParameters: AppServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingGroupDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingGroupDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务分组ID删除服务分组
     * 删除服务分组
     */
    async appServiceSettingGroupDelete(requestParameters: AppServiceSettingGroupDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appServiceSettingGroupDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的服务分组信息
     * 添加服务分组
     */
    async appServiceSettingGroupPostRaw(requestParameters: AppServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingGroupPostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingGroupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Groups`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceGroupToJSON(requestParameters['serviceGroup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingGroupPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的服务分组信息
     * 添加服务分组
     */
    async appServiceSettingGroupPost(requestParameters: AppServiceSettingGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingGroupPostResultApiResponse> {
        const response = await this.appServiceSettingGroupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务分组ID更新服务分组信息
     * 更新服务分组
     */
    async appServiceSettingGroupPutRaw(requestParameters: AppServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingGroupPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingGroupPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceGroupToJSON(requestParameters['serviceGroup']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务分组ID更新服务分组信息
     * 更新服务分组
     */
    async appServiceSettingGroupPut(requestParameters: AppServiceSettingGroupPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appServiceSettingGroupPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * 获取服务分组列表
     */
    async appServiceSettingGroupsRaw(requestParameters: AppServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['providerId'] != null) {
            queryParameters['providerId'] = requestParameters['providerId'];
        }

        if (requestParameters['showFlag'] != null) {
            queryParameters['showFlag'] = requestParameters['showFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Groups`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID和显示标志获取服务分组列表
     * 获取服务分组列表
     */
    async appServiceSettingGroups(requestParameters: AppServiceSettingGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupListApiResponse> {
        const response = await this.appServiceSettingGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务配置项ID获取服务配置项详情
     * 服务配置项详情
     */
    async appServiceSettingItemRaw(requestParameters: AppServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingItem().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceItemApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务配置项ID获取服务配置项详情
     * 服务配置项详情
     */
    async appServiceSettingItem(requestParameters: AppServiceSettingItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemApiResponse> {
        const response = await this.appServiceSettingItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务配置项ID删除服务配置项
     * 删除服务配置项
     */
    async appServiceSettingItemDeleteRaw(requestParameters: AppServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingItemDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingItemDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务配置项ID删除服务配置项
     * 删除服务配置项
     */
    async appServiceSettingItemDelete(requestParameters: AppServiceSettingItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appServiceSettingItemDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的服务配置项信息
     * 添加服务配置项
     */
    async appServiceSettingItemPostRaw(requestParameters: AppServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingItemPostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingItemPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Items`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceItemToJSON(requestParameters['serviceItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingItemPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的服务配置项信息
     * 添加服务配置项
     */
    async appServiceSettingItemPost(requestParameters: AppServiceSettingItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingItemPostResultApiResponse> {
        const response = await this.appServiceSettingItemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务配置项ID更新服务配置项信息
     * 更新服务配置项
     */
    async appServiceSettingItemPutRaw(requestParameters: AppServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingItemPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingItemPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceItemToJSON(requestParameters['serviceItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务配置项ID更新服务配置项信息
     * 更新服务配置项
     */
    async appServiceSettingItemPut(requestParameters: AppServiceSettingItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appServiceSettingItemPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置项列表
     * 服务配置项列表
     */
    async appServiceSettingItemsRaw(requestParameters: AppServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceItemListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bizCode'] != null) {
            queryParameters['bizCode'] = requestParameters['bizCode'];
        }

        if (requestParameters['providerCode'] != null) {
            queryParameters['providerCode'] = requestParameters['providerCode'];
        }

        if (requestParameters['groupCode'] != null) {
            queryParameters['groupCode'] = requestParameters['groupCode'];
        }

        if (requestParameters['showFlag'] != null) {
            queryParameters['showFlag'] = requestParameters['showFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Items`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceItemListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据业务代码、服务商代码、分组代码和显示标志获取服务配置项列表
     * 服务配置项列表
     */
    async appServiceSettingItems(requestParameters: AppServiceSettingItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceItemListApiResponse> {
        const response = await this.appServiceSettingItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID获取服务商详情
     * 获取服务商详情
     */
    async appServiceSettingProviderRaw(requestParameters: AppServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingProvider().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceProviderApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID获取服务商详情
     * 获取服务商详情
     */
    async appServiceSettingProvider(requestParameters: AppServiceSettingProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderApiResponse> {
        const response = await this.appServiceSettingProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID删除服务商
     * 删除服务商
     */
    async appServiceSettingProviderDeleteRaw(requestParameters: AppServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingProviderDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingProviderDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID删除服务商
     * 删除服务商
     */
    async appServiceSettingProviderDelete(requestParameters: AppServiceSettingProviderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appServiceSettingProviderDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的服务商信息
     * 添加服务商
     */
    async appServiceSettingProviderPostRaw(requestParameters: AppServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingProviderPostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingProviderPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Providers`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceProviderToJSON(requestParameters['serviceProvider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingProviderPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的服务商信息
     * 添加服务商
     */
    async appServiceSettingProviderPost(requestParameters: AppServiceSettingProviderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingProviderPostResultApiResponse> {
        const response = await this.appServiceSettingProviderPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商ID更新服务商信息
     * 更新服务商
     */
    async appServiceSettingProviderPutRaw(requestParameters: AppServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appServiceSettingProviderPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingProviderPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceProviderToJSON(requestParameters['serviceProvider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商ID更新服务商信息
     * 更新服务商
     */
    async appServiceSettingProviderPut(requestParameters: AppServiceSettingProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appServiceSettingProviderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据业务代码和显示标志获取服务商列表
     * 获取服务商列表
     */
    async appServiceSettingProvidersRaw(requestParameters: AppServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceProviderListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appServiceSettingProviders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['bizCode'] != null) {
            queryParameters['bizCode'] = requestParameters['bizCode'];
        }

        if (requestParameters['showFlag'] != null) {
            queryParameters['showFlag'] = requestParameters['showFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/Providers`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceProviderListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据业务代码和显示标志获取服务商列表
     * 获取服务商列表
     */
    async appServiceSettingProviders(requestParameters: AppServiceSettingProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceProviderListApiResponse> {
        const response = await this.appServiceSettingProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置ID获取配置详情
     * 配置详情
     */
    async appSettingRaw(requestParameters: AppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appSetting().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置ID获取配置详情
     * 配置详情
     */
    async appSetting(requestParameters: AppSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingApiResponse> {
        const response = await this.appSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置ID删除配置
     * 删除配置
     */
    async appSettingDeleteRaw(requestParameters: AppSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appSettingDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appSettingDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置ID删除配置
     * 删除配置
     */
    async appSettingDelete(requestParameters: AppSettingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appSettingDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新的配置内容
     * 增加配置
     */
    async appSettingPostRaw(requestParameters: AppSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingSettingPostResultApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appSettingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppSettingToJSON(requestParameters['appSetting']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingSettingPostResultApiResponseFromJSON(jsonValue));
    }

    /**
     * 添加新的配置内容
     * 增加配置
     */
    async appSettingPost(requestParameters: AppSettingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingSettingPostResultApiResponse> {
        const response = await this.appSettingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据配置ID更新配置内容
     * 更新配置
     */
    async appSettingPutRaw(requestParameters: AppSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling appSettingPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appSettingPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppSettingToJSON(requestParameters['appSetting']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据配置ID更新配置内容
     * 更新配置
     */
    async appSettingPut(requestParameters: AppSettingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.appSettingPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据服务商代码、分组代码、标签和配置项代码获取配置列表
     * 配置列表
     */
    async appSettingsRaw(requestParameters: AppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling appSettings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['providerCode'] != null) {
            queryParameters['providerCode'] = requestParameters['providerCode'];
        }

        if (requestParameters['groupCode'] != null) {
            queryParameters['groupCode'] = requestParameters['groupCode'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/AppSetting/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据服务商代码、分组代码、标签和配置项代码获取配置列表
     * 配置列表
     */
    async appSettings(requestParameters: AppSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingListApiResponse> {
        const response = await this.appSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
