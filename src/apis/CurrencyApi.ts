/* tslint:disable */
/* eslint-disable */
/**
 * 全部  API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooleanApiResponse,
  Currency,
  CurrencyApiResponse,
  CurrencyExchangeRateApiResponse,
  CurrencyListApiResponse,
  CurrencyTransactionListApiResponse,
  ExchangeRatePutRequest,
  Int64ApiResponse,
} from '../models/index';
import {
    BooleanApiResponseFromJSON,
    BooleanApiResponseToJSON,
    CurrencyFromJSON,
    CurrencyToJSON,
    CurrencyApiResponseFromJSON,
    CurrencyApiResponseToJSON,
    CurrencyExchangeRateApiResponseFromJSON,
    CurrencyExchangeRateApiResponseToJSON,
    CurrencyListApiResponseFromJSON,
    CurrencyListApiResponseToJSON,
    CurrencyTransactionListApiResponseFromJSON,
    CurrencyTransactionListApiResponseToJSON,
    ExchangeRatePutRequestFromJSON,
    ExchangeRatePutRequestToJSON,
    Int64ApiResponseFromJSON,
    Int64ApiResponseToJSON,
} from '../models/index';

export interface CurrenciesRequest {
    appKey: string;
}

export interface CurrencyRequest {
    id: number;
    appKey: string;
}

export interface CurrencyDeleteRequest {
    id: number;
    appKey: string;
}

export interface CurrencyExchangeRateDeleteRequest {
    id: number;
    appKey: string;
}

export interface CurrencyExchangeRatePutRequest {
    code: string;
    appKey: string;
    exchangeRatePutRequest?: ExchangeRatePutRequest;
}

export interface CurrencyExchangeRatesRequest {
    code: string;
    appKey: string;
}

export interface CurrencyPostRequest {
    appKey: string;
    currency?: Currency;
}

export interface CurrencyPutRequest {
    id: number;
    appKey: string;
    currency?: Currency;
}

export interface CurrencyTransactionsRequest {
    appKey: string;
    userId?: number;
    transType?: string;
    curCode?: string;
    startTime?: Date;
    endTime?: Date;
    skip?: number;
    take?: number;
}

/**
 * CurrencyApi - interface
 * 
 * @export
 * @interface CurrencyApiInterface
 */
export interface CurrencyApiInterface {
    /**
     * 获取所有货币的列表，按ID降序排列。
     * @summary 获取货币列表
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currenciesRaw(requestParameters: CurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyListApiResponse>>;

    /**
     * 获取所有货币的列表，按ID降序排列。
     * 获取货币列表
     */
    currencies(requestParameters: CurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyListApiResponse>;

    /**
     * 根据货币ID获取货币的详细信息。
     * @summary 获取货币详情
     * @param {number} id 货币ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyRaw(requestParameters: CurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyApiResponse>>;

    /**
     * 根据货币ID获取货币的详细信息。
     * 获取货币详情
     */
    currency(requestParameters: CurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyApiResponse>;

    /**
     * 根据货币ID删除货币。
     * @summary 删除货币
     * @param {number} id 货币ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyDeleteRaw(requestParameters: CurrencyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据货币ID删除货币。
     * 删除货币
     */
    currencyDelete(requestParameters: CurrencyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据汇率ID删除汇率。
     * @summary 删除汇率
     * @param {number} id 汇率ID
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyExchangeRateDeleteRaw(requestParameters: CurrencyExchangeRateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据汇率ID删除汇率。
     * 删除汇率
     */
    currencyExchangeRateDelete(requestParameters: CurrencyExchangeRateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据货币代码更新汇率信息。
     * @summary 更新汇率
     * @param {string} code 货币代码
     * @param {string} appKey 
     * @param {ExchangeRatePutRequest} [exchangeRatePutRequest] 汇率信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyExchangeRatePutRaw(requestParameters: CurrencyExchangeRatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>>;

    /**
     * 根据货币代码更新汇率信息。
     * 更新汇率
     */
    currencyExchangeRatePut(requestParameters: CurrencyExchangeRatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse>;

    /**
     * 根据货币代码获取该货币的汇率列表。
     * @summary 获取汇率列表
     * @param {string} code 货币代码
     * @param {string} appKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyExchangeRatesRaw(requestParameters: CurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateApiResponse>>;

    /**
     * 根据货币代码获取该货币的汇率列表。
     * 获取汇率列表
     */
    currencyExchangeRates(requestParameters: CurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateApiResponse>;

    /**
     * 创建一个新的货币并返回其ID。
     * @summary 创建新货币
     * @param {string} appKey 
     * @param {Currency} [currency] 货币信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyPostRaw(requestParameters: CurrencyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>>;

    /**
     * 创建一个新的货币并返回其ID。
     * 创建新货币
     */
    currencyPost(requestParameters: CurrencyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse>;

    /**
     * 根据货币ID更新货币的详细信息。
     * @summary 更新货币信息
     * @param {number} id 货币ID
     * @param {string} appKey 
     * @param {Currency} [currency] 货币信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyPutRaw(requestParameters: CurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>>;

    /**
     * 根据货币ID更新货币的详细信息。
     * 更新货币信息
     */
    currencyPut(requestParameters: CurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse>;

    /**
     * 根据用户ID、交易类型、货币代码、时间范围等条件获取货币交易记录。
     * @summary 获取货币交易记录
     * @param {string} appKey 
     * @param {number} [userId] 用户ID
     * @param {string} [transType] 交易类型
     * @param {string} [curCode] 货币代码
     * @param {Date} [startTime] 开始时间
     * @param {Date} [endTime] 结束时间
     * @param {number} [skip] 跳过的条数
     * @param {number} [take] 拉取的条数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApiInterface
     */
    currencyTransactionsRaw(requestParameters: CurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyTransactionListApiResponse>>;

    /**
     * 根据用户ID、交易类型、货币代码、时间范围等条件获取货币交易记录。
     * 获取货币交易记录
     */
    currencyTransactions(requestParameters: CurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyTransactionListApiResponse>;

}

/**
 * 
 */
export class CurrencyApi extends runtime.BaseAPI implements CurrencyApiInterface {

    /**
     * 获取所有货币的列表，按ID降序排列。
     * 获取货币列表
     */
    async currenciesRaw(requestParameters: CurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyListApiResponseFromJSON(jsonValue));
    }

    /**
     * 获取所有货币的列表，按ID降序排列。
     * 获取货币列表
     */
    async currencies(requestParameters: CurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyListApiResponse> {
        const response = await this.currenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据货币ID获取货币的详细信息。
     * 获取货币详情
     */
    async currencyRaw(requestParameters: CurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling currency().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据货币ID获取货币的详细信息。
     * 获取货币详情
     */
    async currency(requestParameters: CurrencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyApiResponse> {
        const response = await this.currencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据货币ID删除货币。
     * 删除货币
     */
    async currencyDeleteRaw(requestParameters: CurrencyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling currencyDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据货币ID删除货币。
     * 删除货币
     */
    async currencyDelete(requestParameters: CurrencyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.currencyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据汇率ID删除汇率。
     * 删除汇率
     */
    async currencyExchangeRateDeleteRaw(requestParameters: CurrencyExchangeRateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling currencyExchangeRateDelete().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyExchangeRateDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/ExchangeRates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据汇率ID删除汇率。
     * 删除汇率
     */
    async currencyExchangeRateDelete(requestParameters: CurrencyExchangeRateDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.currencyExchangeRateDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据货币代码更新汇率信息。
     * 更新汇率
     */
    async currencyExchangeRatePutRaw(requestParameters: CurrencyExchangeRatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling currencyExchangeRatePut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyExchangeRatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/ExchangeRates/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeRatePutRequestToJSON(requestParameters['exchangeRatePutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Int64ApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据货币代码更新汇率信息。
     * 更新汇率
     */
    async currencyExchangeRatePut(requestParameters: CurrencyExchangeRatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse> {
        const response = await this.currencyExchangeRatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据货币代码获取该货币的汇率列表。
     * 获取汇率列表
     */
    async currencyExchangeRatesRaw(requestParameters: CurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateApiResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling currencyExchangeRates().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyExchangeRates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/ExchangeRates/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRateApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据货币代码获取该货币的汇率列表。
     * 获取汇率列表
     */
    async currencyExchangeRates(requestParameters: CurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateApiResponse> {
        const response = await this.currencyExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建一个新的货币并返回其ID。
     * 创建新货币
     */
    async currencyPostRaw(requestParameters: CurrencyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Int64ApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyToJSON(requestParameters['currency']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Int64ApiResponseFromJSON(jsonValue));
    }

    /**
     * 创建一个新的货币并返回其ID。
     * 创建新货币
     */
    async currencyPost(requestParameters: CurrencyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Int64ApiResponse> {
        const response = await this.currencyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据货币ID更新货币的详细信息。
     * 更新货币信息
     */
    async currencyPutRaw(requestParameters: CurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooleanApiResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling currencyPut().'
            );
        }

        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyToJSON(requestParameters['currency']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooleanApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据货币ID更新货币的详细信息。
     * 更新货币信息
     */
    async currencyPut(requestParameters: CurrencyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooleanApiResponse> {
        const response = await this.currencyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 根据用户ID、交易类型、货币代码、时间范围等条件获取货币交易记录。
     * 获取货币交易记录
     */
    async currencyTransactionsRaw(requestParameters: CurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyTransactionListApiResponse>> {
        if (requestParameters['appKey'] == null) {
            throw new runtime.RequiredError(
                'appKey',
                'Required parameter "appKey" was null or undefined when calling currencyTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['transType'] != null) {
            queryParameters['transType'] = requestParameters['transType'];
        }

        if (requestParameters['curCode'] != null) {
            queryParameters['curCode'] = requestParameters['curCode'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = (requestParameters['startTime'] as any).toISOString();
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = (requestParameters['endTime'] as any).toISOString();
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Currency/{appKey}/Transactions`.replace(`{${"appKey"}}`, encodeURIComponent(String(requestParameters['appKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyTransactionListApiResponseFromJSON(jsonValue));
    }

    /**
     * 根据用户ID、交易类型、货币代码、时间范围等条件获取货币交易记录。
     * 获取货币交易记录
     */
    async currencyTransactions(requestParameters: CurrencyTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyTransactionListApiResponse> {
        const response = await this.currencyTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
